# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Jackie PENG
# This file is distributed under the same license as the qteasy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qteasy 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-02 22:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../api/HistoryPanel.rst:2
msgid "HistoryPanel 类"
msgstr ""

#: ../../api/HistoryPanel.rst:4
msgid "历史数据类HistoryPanel:"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:1
msgid "qteasy 量化投资系统使用的主要历史数据的数据类型"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:3
msgid "一个HistoryPanel对象其本质是一个numpy.ndarray，这个ndarray是一个 三维数组，这个三维数组有L层，R行、C列，分别代表L种历史数据、R条数据记录、C种股票的历史数据。历史数据类型可以包括 类似开盘价、收盘价这样的量价数据，同样也可以包括诸如pe、ebitda等等财务数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:10
msgid "HistoryPanel数据结构的核心部分是一个基于numpy的三维ndarray矩阵，这个矩阵由M层N行L列，三个维度的轴标签分别为："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:8
msgid "axis 0: levels/层，每层的标签为一个个股，每一层在HistoryPanel中被称为一个level，所有level的标签被称为shares axis 1: rows/行，每行的标签为一个时间点，每一行在HistoryPanel中被称为一个row，所有row的标签被称为hdates axis 2: columns/列，每列的标签为一种历史数据，每一列在HistoryPanel中被称为一个column，所有column的标签被称为htypes"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:12
msgid "使用HistoryPanel类，用户可以： 1, 方便地对数据进行切片，切片的基本方法是使用__getitem__()方法，也就是使用方括号[]传入切片器或列表对象，切片的输出是一个"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:30
msgid "numpy ndarray。"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:15
msgid "为了对正确的数轴进行切片，通过方括号传入的切片器或列表对象必须按照[htype slicer, shares slicer, dates slicer]的顺序 传入，第一个切片器对数据类型进行切片，第二个对股票品种，第三个对日期切片。切片的方法非常灵活： * 可以通过直接输入数轴的标签来选择某个单独的数据类型/股票品种，如："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:18
msgid "HistoryPanel['close']: 选择所有股票品种的全部历史收盘价 HistoryPanel[,'000300.SH']: 选择000300股票品种的所有历史数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:20
msgid "可以以逗号分隔的数轴标签字符串形式指定某几个股票品种或数据类型，如："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:21
msgid "HistoryPanel['close, open, high']: 选择所有股票品种的全部历史收盘、开盘及最高价"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:22
msgid "可以通过冒号:分隔的数轴标签字符串选择从第一个标签到最后一个标签之间的所有品种或数据类型，如："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:23
msgid "HistoryPanel['000300.SH:000500.SH']: 选择从000300开始到000500之间的所有股票品种全部历史数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:25
msgid "可以通过int列表或str列表指定某几个品种或类型的数据，如："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:25
msgid "HistoryPanel[[0, 1, 2, 4]] 或 HistoryPanel[['close', 'open', 'high', 'low']] 选择第0、1、2、4种数据类型或'close', 'open', 'high', 'low'等标签代表的数据类型"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:27
msgid "也可以通过常见的slicer对象来选择， 如："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:28
msgid "HistoryPanel[0:5:2] 选择0、2、4等三种数据类型的全部数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:30
msgid "上面的所有切片方式可以单独使用，也可以混合使用，甚至几个list混合使用也不会造成问题，如："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:30
msgid "要选择000300， 000500， 000700等三只股票的close到high之间所有类型的2010年全年的历史数据，可以用下列方式实现： HistoryPanel['close:high', ['000300', '000500', '000700'], '20100101:20101231']"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:37
msgid "2, 动态地修改每一个数轴上的标签内容，容易地调取标签和元素位置的对应关系（一个字典）"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:33
msgid "HistoryPanel.shares     输出一个列表，包含按顺序排列的所有层标签，即所有股票品种代码或名称 HistoryPanel.hdates     输出一个列表，包含按顺序排列的所有行标签，即所有数据的日期及时间 HistoryPanel.htypes     输出一个列表，包含按顺序排列的所有列标签，即所数据类型 HistoryPanel.levels     输出一个字典，包含所有层标签及其对应的层编号（从0开始到M-1） HistoryPanel.columns    输出一个字典，包含所有数据类型标签及其对应的列编号（从0开始到L-1） HistoryPanel.rows       输出一个字典，包含所有日期行标签及其对应的行号，从0开始一直到N-1）"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:39
msgid "3, 方便地打印HistoryPanel的相关信息 4, 方便地打印及格式化输出HistoryPanel的内容 5, 方便地转化为 pandas DataFrame对象"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:42
msgid "HistoryPanel不能完整转化为DataFrame对象，因为DataFrame只能适应2D数据。在转化为DataFrame的时候，用户只能选择 HistoryPanel的一个切片，或者是一个股票品种，或者是一个数据类型，输出的DataFrame包含的数据行数与"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:44
msgid "6, 方便地由多个pandas DataFrame对象组合而成"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:47
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:10
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:4
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:7
msgid "Properties"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:48
msgid "is_empty: bool, 该属性返回一个bool值，表示HistoryPanel是否为空 values: np.ndarray, 该属性返回一个numpy ndarray，包含HistoryPanel的全部数据 levels: dict, 该属性返回一个dict， 包含所有层标签(股票代码)及其对应的层编号 rows: dict, 该属性返回一个dict， 包含所有行标签(交易日期)及其对应的行编号 columns: dict, 该属性返回一个dict， 包含所有列标签(数据类型)及其对应的列编号 shares: list, 该属性包含所有层标签，即所有股票代码 hdates: list, 该属性包含所有行标签，即所有日期时间 htypes: list, 该属性包含所有列标签，即所有历史数据类型"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:59
msgid "该方法用于对HistoryPanel进行切片，返回一个numpy ndarray"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:63
msgid "该方法用于重新设置HistoryPanel的标签，如果不输入任何参数，则会自动重新生成标签"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:67
msgid "该方法用于将两个HistoryPanel对象合并为一个HistoryPanel对象"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:71
msgid "该方法用于将HistoryPanel的一个切片转化为pandas DataFrame对象"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel:75
msgid "该方法用于将HistoryPanel转化为一个multi-index DataFrame对象"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.as_type:1
msgid "将HistoryPanel的数据类型转换为dtype类型，dtype只能为'float'或'int'"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_doc:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_list:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_strategies:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_ins:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.remove_start_up_setting:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.reset_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.update_start_up_setting:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stock_codes:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stocks:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_overview:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.info:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.run:0
#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.as_type:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.ffill:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillinf:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillna:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten_to_dataframe:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_head:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_tail:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.head:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.tail:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_multi_index_dataframe:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.unstack:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategies:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategy:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_blender:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_type_id_in_priority:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_types_in_priority:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_hdate_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_run_timing:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_run_timing:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_run_timing:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_price_type_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_share_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_stg:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_run_timing:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_by_id:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.info:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.is_ready:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.view_blender:0
msgid "参数"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.as_type:3
msgid "需要转换的目标数据类型"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_doc:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_list:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_strategies:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_ins:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.remove_start_up_setting:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.reset_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.start_up_settings:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.update_start_up_setting:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stock_codes:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stocks:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_overview:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:0
#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:0
#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.rows:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.as_type:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.ffill:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillinf:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillna:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten_to_dataframe:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.info:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.len:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_multi_index_dataframe:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.unstack:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.bt_price_type_count:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.max_window_length:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_hdates:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_price_types:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_shape:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_shares:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal_hdate:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal_hdate_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal_price_type_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_space_par:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.ready:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.strategy_timing_count:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategies:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategy:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_blender:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_type_id_in_priority:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_types_in_priority:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_hdate_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_run_timing:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_run_timing:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_run_timing:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_price_type_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_share_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_stg:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_by_id:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_id_pairs:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.is_ready:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:0
msgid "返回类型"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:0
#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.as_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:0
msgid "抛出"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.as_type:8
msgid "当输入的数据类型不正确或输入除float/int外的其他数据类型时"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.candle:1
msgid "plot candle chart with data in the HistoryPanel, check data availability before plotting"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.column_count:1
msgid "获取HistoryPanel的列数量或历史数据数量"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.columns:1
msgid "返回一个字典，代表HistoryPanel的历史数据，将历史数据与列号进行对应 columns = {htype_name[0]: 0,"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.columns:3
msgid "htype_naem[1]: 1, htype_name[2]: 2, ... htype_name[c]: c}"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.columns:8
msgid "这样便于内部根据股票代码对数据进行切片"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.copy:1
msgid "返回一个新的HistoryPanel对象，其值和本对象相同"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.ffill:1
msgid "前向填充缺失值，当历史数据中存在缺失值时，使用缺失值以前 的最近有效数据填充缺失值"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_doc:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_list:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_strategies:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_ins:0
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:0
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stocks:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:0
#: ../../../../qteasy/core.py:docstring of qteasy.core.run:0
#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:0
#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.rows:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.ffill:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillinf:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillna:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_head:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_tail:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.head:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.len:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.tail:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.unstack:0
#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_shape:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_reference_data:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_space_par:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_blender:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_type_id_in_priority:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_types_in_priority:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_hdate_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_price_type_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_share_idx:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_price_type:0
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.is_ready:0
msgid "返回"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.ffill:7
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillinf:6
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillna:6
msgid "**out**"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_doc:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_list:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_strategies:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_ins:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:13
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:18
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:25
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:25
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.remove_start_up_setting:11
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:14
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.start_up_settings:6
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.update_start_up_setting:10
#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stocks:17
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:37
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:16
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:130
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:32
#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:74
#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:29
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.ffill:11
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten:10
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten_to_dataframe:13
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_head:10
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_tail:10
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.head:10
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.info:6
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:14
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:20
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.len:7
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:13
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:14
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:13
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:22
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.tail:10
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:16
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_multi_index_dataframe:10
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.unstack:10
#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:26
#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:50
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategies:14
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategy:25
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:66
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_stg:15
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_id_pairs:6
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:21
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:18
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:37
msgid "示例"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillinf:1
msgid "使用with_value来填充HistoryPanel中的所有inf值"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillinf:3
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillna:3
msgid "填充的值"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.fillna:1
msgid "使用with_value来填充HistoryPanel中的所有nan值"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten:1
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_multi_index_dataframe:1
msgid "等同于HistoryPanel.flatten_to_dataframe()"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten:3
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten_to_dataframe:6
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_multi_index_dataframe:3
msgid "平铺HistoryPanel的每一层时，沿行方向还是列方向平铺， 'col'或'column'表示沿列方向平铺，'row'表示沿行方向平铺"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten_to_dataframe:1
msgid "将一个HistoryPanel\"展平\"成为一个DataFrame"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flatten_to_dataframe:3
msgid "HistoryPanel的多层数据会被\"平铺\"到DataFrame的列，变成一个MultiIndex，或者多层数据 会被平铺到DataFrame的行，同样变成一个MultiIndex，平铺到行还是列取决于along参数"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_head:1
msgid "以multi-index DataFrame的形式返回HistoryPanel的最初几行，默认五行"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_head:3
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_tail:3
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.head:3
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.tail:3
msgid "打印的行数"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_head:6
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.head:6
msgid "* *dataframe, multi-indexed by share and htype as columns, with only first row_count rows* * *一个dataframe，以share和htype为列的多重索引，只包含前row_count行*"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_head:6
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.head:6
msgid "*dataframe, multi-indexed by share and htype as columns, with only first row_count rows*"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_head:7
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.head:7
msgid "*一个dataframe，以share和htype为列的多重索引，只包含前row_count行*"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_tail:1
msgid "以multi-index DataFrame的形式返回HistoryPanel的最后几行，默认五行"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_tail:6
msgid "* *dataframe, multi-indexed by share and htype as columns, with only last row_count rows* * *一个dataframe，以share和htype为列的多重索引，只包含后row_count行*"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_tail:6
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.tail:6
msgid "*dataframe, multi-indexed by share and htype as columns, with only last row_count rows*"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.flattened_tail:7
msgid "*一个dataframe，以share和htype为列的多重索引，只包含后row_count行*"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.hdate_count:1
#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.htype_count:1
msgid "获取HistoryPanel的历史数据类型数量"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.hdates:1
msgid "获取HistoryPanel的历史日期时间戳list"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.head:1
msgid "返回HistoryPanel的最初几行，默认五行"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.htypes:1
msgid "获取HistoryPanel的历史数据类型列表"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.info:1
msgid "打印本HistoryPanel对象的信息"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.is_empty:1
msgid "判断HistoryPanel是否为空"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:3
msgid "获取HistoryPanel的一个片段，start_index和end_index都是int数，表示日期序号，返回"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:2
msgid "这两个序号代表的日期之间的所有数据，返回的类型为一个HistoryPanel，包含所有share和 htypes的数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:10
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:10
msgid "**out** -- 一个HistoryPanel，包含start_date到end_date之间所有share和htypes的数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:26
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:33
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:27
msgid "share 1, label: 000200"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:27
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:33
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:28
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:35
msgid "open  high  low  close  volume"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:28
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:34
msgid "2015-01-07    10    20   30     40      50 2015-01-08    10    20   30     40      50 2015-01-09    10    20   30     40      50"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.isegment:32
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:46
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:34
msgid "share 2, label: 000300"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:1
msgid "将一个HistoryPanel对象与另一个HistoryPanel对象连接起来，生成一个新的HistoryPanel："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:3
msgid "新HistoryPanel的行、列、层标签分别是两个原始HistoryPanel的行、列、层标签的并集，也就是说，新的HistoryPanel的行、列 层标签完全包含两个HistoryPanel对象的对应标签。"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:6
msgid "需要合并的另一个HistoryPanel"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:8
msgid "两个HP的shares是否相同，如果相同，可以省去shares维度的标签合并，以节省时间。默认False，"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:10
msgid "两个HP的htypes是否相同，如果相同，可以省去htypes维度的标签合并，以节省时间。默认False，"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:12
msgid "两个HP的hdates是否相同，如果相同，可以省去hdates维度的标签合并，以节省时间。默认False，"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:14
msgid "空数据填充值，当组合后的HP存在空数据时，应该以什么值填充，默认为np.nan"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:21
msgid "# 如果两个HistoryPanel中包含标签相同的数据，那么新的HistoryPanel中将包含调用join方法的HistoryPanel对象的相应数据。例如： >>> hp1 = HistoryPanel(np.array([[[8, 9, 9], [7, 5, 5], [4, 8, 4], [1, 0, 7], [8, 7, 9]], ...                                     [[2, 3, 3], [5, 4, 6], [2, 8, 7], [3, 3, 4], [8, 8, 7]]]), ...                           levels=['000200', '000300'], ...                           rows=pd.date_range('2020-01-01', periods=5), ...                           columns=['close', 'open', 'high']) >>> hp2 = HistoryPanel(np.array([[[8, 9, 9], [7, 5, 5], [4, 8, 4], [1, 0, 7], [8, 7, 9]], ...                                     [[2, 3, 3], [5, 4, 6], [2, 8, 7], [3, 3, 4], [8, 8, 7]]]), ...                           levels=['000400', '000500'], ...                           rows=pd.date_range('2020-01-01', periods=5), ...                           columns=['close', 'open', 'high']) >>> hp1 share 0, label: 000200"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:34
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:41
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:49
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:56
msgid "close  open  high"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:35
msgid "2020-01-01      8     9     9 2020-01-02      7     5     5 2020-01-03      4     8     4 2020-01-04      1     0     7 2020-01-05      8     7     9 share 1, label: 000300"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:42
msgid "2020-01-01      2     3     3 2020-01-02      5     4     6 2020-01-03      2     8     7 2020-01-04      3     3     4 2020-01-05      8     8     7 >>> hp2 share 0, label: 000400"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:50
msgid "2020-01-01      8     9     9 2020-01-02      7     5     5 2020-01-03      4     8     4 2020-01-04      1     0     7 2020-01-05      8     7     9 share 1, label: 000500"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.join:57
msgid "2020-01-01      2     3     3 2020-01-02      5     4     6 2020-01-03      2     8     7 2020-01-04      3     3     4 2020-01-05      8     8     7"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.len:1
msgid "返回HistoryPanel对象的长度，即日期个数"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.len:3
msgid "日期个数"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.level_count:1
msgid "返回HistoryPanel中股票或资产品种的数量"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.levels:1
msgid "返回HistoryPanel的层标签字典，也是HistoryPanel的股票代码字典"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.levels:3
msgid "HistoryPanel的层标签是保存成一个字典形式的： levels =    {share_name[0]: 0,"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.levels:5
msgid "share_name[1]: 1, share_name[2]: 2, ... share_name[l]: l}"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.levels:9
msgid "这个字典在level的标签与level的id之间建立了一个联系，因此，如果需要通过层标签来快速地访问某一层的数据，可以非常容易地通过："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.levels:10
msgid "data = HP.values[levels[level_name[a], :, :]"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.levels:11
msgid "来访问"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.levels:13
msgid "不过这是HistoryPanel内部的处理机制，在HistoryPanel的外部，可以通过切片的方式快速访问不同的数据。"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.ohlc:1
msgid "plot ohlc chart with data in the HistoryPanel, check data availability before plotting"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.ohlc:3
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.renko:3
msgid "args: kwargs: :return:"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.plot:1
msgid "plot current HistoryPanel, settings according to args and kwargs"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:1
msgid "给HistoryPanel对象的层、行、列标签重新赋值"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:3
msgid "股票列表"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:5
msgid "数据类型列表"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:7
msgid "日期列表"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:34
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:47
msgid "typeA  typeB  typeC  typeD  typeE"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:35
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.re_label:48
msgid "2015-01-05     10     20     30     40     50 2015-01-06     10     20     30     40     50 2015-01-07     10     20     30     40     50 2015-01-08     10     20     30     40     50 2015-01-09     10     20     30     40     50 2015-01-10     10     20     30     40     50 2015-01-11     10     20     30     40     50 2015-01-12     10     20     30     40     50 2015-01-13     10     20     30     40     50 2015-01-14     10     20     30     40     50"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.renko:1
msgid "plot renko chart with data in the HistoryPanel, check data availability before plotting"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.row_count:1
msgid "获取HistoryPanel的行数量"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.rows:1
msgid "返回Hi storyPanel的日期字典，通过这个字典建立日期与行号的联系："
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.rows:7
msgid "rows =  {row_date[0]: 0,"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.rows:4
msgid "row_date[1]: 1, row_date[2]: 2, ... row_date[r]: r }"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.rows:9
msgid "因此内部可以较快地进行数据切片或数据访问"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.rows:11
msgid "日期字典"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:3
msgid "获取HistoryPanel的一个日期片段，start_date和end_date都是日期型数据，返回"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:2
msgid "这两个日期之间的所有数据，返回的类型为一个HistoryPanel，包含所有share和 htypes的数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:29
#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.segment:36
msgid "2015-01-07    10    20   30     40      50 2015-01-08    10    20   30     40      50 2015-01-09    10    20   30     40      50 2015-01-10    10    20   30     40      50"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.shape:1
msgid "获取HistoryPanel的各个维度的尺寸"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.share_count:1
msgid "获取HistoryPanel中股票或资产品种的数量"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.shares:1
msgid "返回HistoryPanel的层标签——股票列表"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:2
msgid "获取HistoryPanel的一个股票或数据种类片段，shares和htypes可以为列表或逗号分隔字符"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:2
msgid "串，表示需要获取的股票或数据的种类。"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:4
msgid "需要的股票列表"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:6
msgid "需要的数据类型列表"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice:9
msgid "**out** -- 一个HistoryPanel，包含shares和htypes中指定的股票和数据类型的数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:1
msgid "将HistoryPanel对象中的指定片段转化为DataFrame"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:3
msgid "指定htype或者share，将这个htype或share对应的数据切片转化为一个DataFrame。 由于HistoryPanel对象包含三维数据，因此在转化时必须指定htype或者share参数中的一个"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:6
msgid "表示需要生成DataFrame的数据类型切片 如果给出此参数，定位该htype对应的切片后，将该htype对应的所有股票所有日期的数据转化为一个DataFrame 如果类型为str，表示htype的名称，如果类型为int，代表该htype所在的列序号"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:10
msgid "表示需要生成DataFrame的股票代码切片 如果给出此参数，定位该share对应的切片后，将该share对应的所有数据类型所有日期的数据转化为一个DataFrame 如果类型为str，表示股票代码，如果类型为int，代表该share所在的层序号"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:14
msgid "是否去除NaN值"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.slice_to_dataframe:16
msgid "是否将inf值当成NaN值一同去掉，当dropna为False时无效"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.tail:1
msgid "返回HistoryPanel的最末几行，默认五行"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.tail:6
msgid "* *dataframe, multi-indexed by share and htype as columns, with only last row_count rows* * *一个dataframe，以share和htype为列的多重索引，只包含最后row_count行*"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.tail:7
msgid "*一个dataframe，以share和htype为列的多重索引，只包含最后row_count行*"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:2
msgid "将一个HistoryPanel转化为一个dict，这个dict的keys是HP中的shares，values是每个shares对应的历史数据"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:2
msgid "这些数据以DataFrame的格式存储"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:4
msgid "- 'share' 或 'shares': 将HistoryPanel中的数据切成若干片，每一片转化成一个DataFrame， 它的keys是股票的代码，每个股票代码一个DataFrame - 'htype' 或 'htypes': 将HistoryPanel中的数据切成若干片，每一片转化成一个DataFrame，  它的keys是历史数据类型，每种类型一个DataFrame"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:5
msgid "'share' 或 'shares': 将HistoryPanel中的数据切成若干片，每一片转化成一个DataFrame，"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:6
msgid "它的keys是股票的代码，每个股票代码一个DataFrame - 'htype' 或 'htypes': 将HistoryPanel中的数据切成若干片，每一片转化成一个DataFrame，"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:9
msgid "它的keys是历史数据类型，每种类型一个DataFrame"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.to_df_dict:12
msgid "**df_dict**"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.unstack:1
msgid "等同于方法self.to_df_dict(), 是方法self.to_df_dict()的别称"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.unstack:3
msgid "指定按照share或者htype来unstack, 默认为share"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.HistoryPanel.unstack:6
msgid "unstack后的结果，是一个字典，key为share或htype，value为对应的DataFrame"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.HistoryPanel.values:1
msgid "返回HistoryPanel的values"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:2
msgid "从本地data_source获取所需的数据并组装为适应于策略"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:2
msgid "需要的HistoryPanel数据对象"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:4
msgid "需要获取的数据类型可以由data_types参数给出，如果不给出data_types参数，则可以通过htypes/htype_names等参数 结合freq和asset_type参数创建可能的htypes，如果给出了data_types参数，则htypes/htype_names参数将被忽略"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:7
msgid "需要获取的历史数据的名称集合，如果htypes为空，则系统将尝试通过根据历史数据名称和freq/asset_type参数创建 所有可能的htypes。输入方式可以为str或list：  - str:     'open, high, low, close'  - list:    ['open', 'high', 'low', 'close']"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:7
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:12
msgid "需要获取的历史数据的名称集合，如果htypes为空，则系统将尝试通过根据历史数据名称和freq/asset_type参数创建 所有可能的htypes。输入方式可以为str或list："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:9
msgid "str:     'open, high, low, close'"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:10
msgid "list:    ['open', 'high', 'low', 'close']"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:15
msgid "需要获取的历史数据类型集合，必须是合法的数据类型对象。 如果给出了本参数，htype_names会被忽略，否则根据htype_names参数创建可能的htypes"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:18
msgid "需要获取历史数据的数据源"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:20
msgid "需要获取历史数据的证券代码集合，可以是以逗号分隔的证券代码字符串或者证券代码字符列表， 如以下两种输入方式皆合法且等效：  - str:     '000001.SZ, 000002.SZ, 000004.SZ, 000005.SZ'  - list:    ['000001.SZ', '000002.SZ', '000004.SZ', '000005.SZ']"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:20
msgid "需要获取历史数据的证券代码集合，可以是以逗号分隔的证券代码字符串或者证券代码字符列表， 如以下两种输入方式皆合法且等效："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:22
msgid "str:     '000001.SZ, 000002.SZ, 000004.SZ, 000005.SZ'"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:23
msgid "list:    ['000001.SZ', '000002.SZ', '000004.SZ', '000005.SZ']"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:25
msgid "需要获取历史数据的证券代码集合，可以是以逗号分隔的证券代码字符串或者证券代码字符列表， 如以下两种输入方式皆合法且等效： - str:     '000001, 000002, 000004, 000005' - list:    ['000001', '000002', '000004', '000005']"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:30
msgid "YYYYMMDD HH:MM:SS 格式的日期/时间，获取的历史数据的开始日期/时间(如果可用)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:32
msgid "YYYYMMDD HH:MM:SS 格式的日期/时间，获取的历史数据的结束日期/时间(如果可用)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:34
msgid "获取的历史数据的行数，如果指定了start和end，则忽略此参数，且获取的数据的时间范围为[start, end] 如果未指定start和end，则获取数据表中最近的rows条数据，使用row来获取数据时，速度比使用日期慢得多"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:37
msgid "获取的历史数据的频率，包括以下选项：  - 1/5/15/30min 1/5/15/30分钟频率周期数据(如K线)  - H/D/W/M 分别代表小时/天/周/月 周期数据(如K线)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:39
msgid "获取的历史数据的频率，包括以下选项："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:39
msgid "1/5/15/30min 1/5/15/30分钟频率周期数据(如K线)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:40
msgid "H/D/W/M 分别代表小时/天/周/月 周期数据(如K线)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:42
msgid "限定获取的数据中包含的资产种类，包含以下选项或下面选项的组合，合法的组合方式包括 逗号分隔字符串或字符串列表，例如: 'E, IDX' 和 ['E', 'IDX']都是合法输入  - any: 可以获取任意资产类型的证券数据(默认值)  - E:   只获取股票类型证券的数据  - IDX: 只获取指数类型证券的数据  - FT:  只获取期货类型证券的数据  - FD:  只获取基金类型证券的数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:42
msgid "限定获取的数据中包含的资产种类，包含以下选项或下面选项的组合，合法的组合方式包括 逗号分隔字符串或字符串列表，例如: 'E, IDX' 和 ['E', 'IDX']都是合法输入"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:44
msgid "any: 可以获取任意资产类型的证券数据(默认值)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:45
msgid "E:   只获取股票类型证券的数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:46
msgid "IDX: 只获取指数类型证券的数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:47
msgid "FT:  只获取期货类型证券的数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:48
msgid "FD:  只获取基金类型证券的数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:50
msgid "Deprecated: 对于某些数据，可以获取复权数据，需要通过复权因子计算，复权选项包括：  - none / n: 不复权(默认值)  - back / b: 后复权  - forward / fw / f: 前复权  从下一个版本开始，adj参数将不再可用，请直接在htype中使用close:b等方式指定复权价格"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:54
msgid "Deprecated: 对于某些数据，可以获取复权数据，需要通过复权因子计算，复权选项包括："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:52
msgid "none / n: 不复权(默认值)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:53
msgid "back / b: 后复权"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:54
msgid "forward / fw / f: 前复权"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:55
msgid "从下一个版本开始，adj参数将不再可用，请直接在htype中使用close:b等方式指定复权价格"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:57
msgid "True时返回HistoryPanel对象,False时返回一个包含DataFrame对象的字典"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:59
msgid "如果返回DataFrame对象，设置dataframe的分组策略 - 'shares' / 'share' / 's': 每一个share组合为一个dataframe - 'htypes' / 'htype' / 'h': 每一个htype组合为一个dataframe"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:63
msgid "用于生成trade_time_index的参数，包括： drop_nan: bool     是否保留全NaN的行 resample_method: str     如果数据需要升频或降频时，调整频率的方法     调整数据频率分为数据降频和升频，在两种不同情况下，可用的method不同：     数据降频就是将多个数据合并为一个，从而减少数据的数量，但保留尽可能多的信息，     例如，合并下列数据(每一个tuple合并为一个数值，?表示合并后的数值）         [(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(?), (?), (?)]     数据合并方法:     - 'last'/'close': 使用合并区间的最后一个值。如：         [(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(3), (5), (7)]     - 'first'/'open': 使用合并区间的第一个值。如：         [(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(1), (4), (6)]     - 'max'/'high': 使用合并区间的最大值作为合并值：         [(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(3), (5), (7)]     - 'min'/'low': 使用合并区间的最小值作为合并值：         [(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(1), (4), (6)]     - 'avg'/'mean': 使用合并区间的平均值作为合并值：         [(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(2), (4.5), (6.5)]     - 'sum'/'total': 使用合并区间的平均值作为合并值：         [(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(2), (4.5), (6.5)]      数据升频就是在已有数据中插入新的数据，插入的新数据是缺失数据，需要填充。     例如，填充下列数据(?表示插入的数据）         [1, 2, 3] 填充后变为: [?, 1, ?, 2, ?, 3, ?]     缺失数据的填充方法如下:     - 'ffill': 使用缺失数据之前的最近可用数据填充，如果没有可用数据，填充为NaN。如：         [1, 2, 3] 填充后变为: [NaN, 1, 1, 2, 2, 3, 3]     - 'bfill': 使用缺失数据之后的最近可用数据填充，如果没有可用数据，填充为NaN。如：         [1, 2, 3] 填充后变为: [1, 1, 2, 2, 3, 3, NaN]     - 'nan': 使用NaN值填充缺失数据：         [1, 2, 3] 填充后变为: [NaN, 1, NaN, 2, NaN, 3, NaN]     - 'zero': 使用0值填充缺失数据：         [1, 2, 3] 填充后变为: [0, 1, 0, 2, 0, 3, 0] b_days_only: bool 默认True     是否强制转换自然日频率为工作日，即：     'D' -> 'B'     'W' -> 'W-FRI'     'M' -> 'BM' trade_time_only: bool, default True     为True时 仅生成交易时间段内的数据，交易时间段的参数通过**kwargs设定 include_start: bool, default True     日期时间序列是否包含开始日期/时间 include_end: bool, default True     日期时间序列是否包含结束日期/时间 start_am:, str     早晨交易时段的开始时间 end_am:, str     早晨交易时段的结束时间 include_start_am: bool     早晨交易时段是否包括开始时间 include_end_am: bool     早晨交易时段是否包括结束时间 start_pm: str     下午交易时段的开始时间 end_pm: str     下午交易时段的结束时间 include_start_pm: bool     下午交易时段是否包含开始时间 include_end_pm: bool     下午交易时段是否包含结束时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:63
msgid "用于生成trade_time_index的参数，包括： drop_nan: bool"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:65
msgid "是否保留全NaN的行"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:96
msgid "resample_method: str"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:67
msgid "如果数据需要升频或降频时，调整频率的方法 调整数据频率分为数据降频和升频，在两种不同情况下，可用的method不同： 数据降频就是将多个数据合并为一个，从而减少数据的数量，但保留尽可能多的信息， 例如，合并下列数据(每一个tuple合并为一个数值，?表示合并后的数值）"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:71
msgid "[(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(?), (?), (?)]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:72
msgid "数据合并方法: - 'last'/'close': 使用合并区间的最后一个值。如："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:74
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:78
msgid "[(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(3), (5), (7)]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:75
msgid "'first'/'open': 使用合并区间的第一个值。如："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:76
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:80
msgid "[(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(1), (4), (6)]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:77
msgid "'max'/'high': 使用合并区间的最大值作为合并值："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:79
msgid "'min'/'low': 使用合并区间的最小值作为合并值："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:81
msgid "'avg'/'mean': 使用合并区间的平均值作为合并值："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:82
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:84
msgid "[(1, 2, 3), (4, 5), (6, 7)] 合并后变为: [(2), (4.5), (6.5)]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:84
msgid "'sum'/'total': 使用合并区间的平均值作为合并值："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:86
msgid "数据升频就是在已有数据中插入新的数据，插入的新数据是缺失数据，需要填充。 例如，填充下列数据(?表示插入的数据）"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:88
msgid "[1, 2, 3] 填充后变为: [?, 1, ?, 2, ?, 3, ?]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:89
msgid "缺失数据的填充方法如下: - 'ffill': 使用缺失数据之前的最近可用数据填充，如果没有可用数据，填充为NaN。如："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:91
msgid "[1, 2, 3] 填充后变为: [NaN, 1, 1, 2, 2, 3, 3]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:92
msgid "'bfill': 使用缺失数据之后的最近可用数据填充，如果没有可用数据，填充为NaN。如："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:93
msgid "[1, 2, 3] 填充后变为: [1, 1, 2, 2, 3, 3, NaN]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:94
msgid "'nan': 使用NaN值填充缺失数据："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:95
msgid "[1, 2, 3] 填充后变为: [NaN, 1, NaN, 2, NaN, 3, NaN]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:96
msgid "'zero': 使用0值填充缺失数据："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:97
msgid "[1, 2, 3] 填充后变为: [0, 1, 0, 2, 0, 3, 0]"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:101
msgid "b_days_only: bool 默认True"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:99
msgid "是否强制转换自然日频率为工作日，即： 'D' -> 'B' 'W' -> 'W-FRI' 'M' -> 'BM'"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:103
msgid "trade_time_only: bool, default True"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:104
msgid "为True时 仅生成交易时间段内的数据，交易时间段的参数通过**kwargs设定"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:105
msgid "include_start: bool, default True"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:106
msgid "日期时间序列是否包含开始日期/时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:107
msgid "include_end: bool, default True"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:108
msgid "日期时间序列是否包含结束日期/时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:109
msgid "start_am:, str"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:110
msgid "早晨交易时段的开始时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:111
msgid "end_am:, str"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:112
msgid "早晨交易时段的结束时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:113
msgid "include_start_am: bool"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:114
msgid "早晨交易时段是否包括开始时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:115
msgid "include_end_am: bool"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:116
msgid "早晨交易时段是否包括结束时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:117
msgid "start_pm: str"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:118
msgid "下午交易时段的开始时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:119
msgid "end_pm: str"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:120
msgid "下午交易时段的结束时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:121
msgid "include_start_pm: bool"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:122
msgid "下午交易时段是否包含开始时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:124
msgid "include_end_pm: bool"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:124
msgid "下午交易时段是否包含结束时间"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:126
msgid "* *HistoryPanel* -- 如果设置as_data_frame为False，则返回一个HistoryPanel对象 * *Dict of DataFrame* -- 如果设置as_data_frame为True，则返回一个Dict，其值为多个DataFrames"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:126
msgid "*HistoryPanel* -- 如果设置as_data_frame为False，则返回一个HistoryPanel对象"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_history_data:127
msgid "*Dict of DataFrame* -- 如果设置as_data_frame为True，则返回一个Dict，其值为多个DataFrames"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:1
msgid "将多个dataframe组合成一个HistoryPanel."
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:3
msgid "需要被堆叠的dataframe，可以为list或dict， dfs可以是一个dict或一个list，如果是一个list，这个list包含需要组合的所有dataframe，如果是dict，这个dict的values包含 所有需要组合的dataframe，dict的key包含每一个dataframe的标签，这个标签可以被用作HistoryPanel的层（shares）或列 （htypes）标签。如果dfs是一个list，则组合后的行标签或列标签必须明确给出。"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:8
msgid "每个dataframe代表的数据类型。 dataframe_as == 'shares'，     表示每个DataFrame代表一个share的数据，每一列代表一个htype。组合后的HP对象     层数与DataFrame的数量相同，而列数等于所有DataFrame的列的并集，行标签也为所有DataFrame的行标签的并集     在这种模式下：     如果dfs是一个list，shares参数必须给出，且shares的数量必须与DataFrame的数量相同，作为HP的层标签     如果dfs是一个dict，shares参数不必给出，dfs的keys会被用于层标签，如果shares参数给出且符合要求，     shares参数将取代dfs的keys参数  dataframe_as == 'htypes'，     表示每个DataFrame代表一个htype的数据，每一列代表一个share。组合后的HP对象     列数与DataFrame的数量相同，而层数等于所有DataFrame的列的并集，行标签也为所有DataFrame的行标签的并集     在这种模式下，     如果dfs是一个list，htypes参数必须给出，且htypes的数量必须与DataFrame的数量相同，作为HP的列标签     如果dfs是一个dict，htypes参数不必给出，dfs的keys会被用于列标签，如果htypes参数给出且符合要求，     htypes参数将取代dfs的keys参数"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:8
msgid "每个dataframe代表的数据类型。 dataframe_as == 'shares'，"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:10
msgid "表示每个DataFrame代表一个share的数据，每一列代表一个htype。组合后的HP对象 层数与DataFrame的数量相同，而列数等于所有DataFrame的列的并集，行标签也为所有DataFrame的行标签的并集 在这种模式下： 如果dfs是一个list，shares参数必须给出，且shares的数量必须与DataFrame的数量相同，作为HP的层标签 如果dfs是一个dict，shares参数不必给出，dfs的keys会被用于层标签，如果shares参数给出且符合要求， shares参数将取代dfs的keys参数"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:22
msgid "dataframe_as == 'htypes'，"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:18
msgid "表示每个DataFrame代表一个htype的数据，每一列代表一个share。组合后的HP对象 列数与DataFrame的数量相同，而层数等于所有DataFrame的列的并集，行标签也为所有DataFrame的行标签的并集 在这种模式下， 如果dfs是一个list，htypes参数必须给出，且htypes的数量必须与DataFrame的数量相同，作为HP的列标签 如果dfs是一个dict，htypes参数不必给出，dfs的keys会被用于列标签，如果htypes参数给出且符合要求， htypes参数将取代dfs的keys参数"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:25
msgid "生成的HistoryPanel的层标签或股票名称标签。 如果堆叠方式为\"shares\"，则层标签必须以dict的key的形式给出或者在shares参数中给出 以下两种参数均有效且等效： '000001.SZ, 000002.SZ, 000003.SZ' ['000001.SZ', '000002.SZ', '000003.SZ']  如果堆叠方式为\"htypes\"，不需要给出shares，默认使用dfs的columns标签的并集作为输出的层标签 如果给出了shares，则会强制使用shares作为层标签，多出的标签会用fill_values填充， 多余的DataFrame数据会被丢弃"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:25
msgid "生成的HistoryPanel的层标签或股票名称标签。 如果堆叠方式为\"shares\"，则层标签必须以dict的key的形式给出或者在shares参数中给出 以下两种参数均有效且等效： '000001.SZ, 000002.SZ, 000003.SZ' ['000001.SZ', '000002.SZ', '000003.SZ']"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:31
msgid "如果堆叠方式为\"htypes\"，不需要给出shares，默认使用dfs的columns标签的并集作为输出的层标签 如果给出了shares，则会强制使用shares作为层标签，多出的标签会用fill_values填充， 多余的DataFrame数据会被丢弃"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:35
msgid "生成的HistoryPanel的列标签或数据类型标签。 如果堆叠方式为\"htypes\"，则层标签必须以dict的key的形式给出或者在shares参数中给出 以下两种参数均有效且等效： '000001.SZ, 000002.SZ, 000003.SZ' ['000001.SZ', '000002.SZ', '000003.SZ'] 如果堆叠方式为\"shares\"，不需要给出htypes，默认使用dfs的columns标签的并集作为列标签 如果给出了htypes，则会强制用它作为列标签，多出的标签会用fill_values填充， 多余的DataFrame数据会被丢弃"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:44
msgid "多余的位置用fill_value填充"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.stack_dataframes:46
msgid "一个由多个单index的数据框组成的HistoryPanel对象"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:1
msgid "根据DataFrame中的数据创建HistoryPanel对象。"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:3
msgid "需要被转化为HistoryPanel的DataFrame。"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:5
msgid "如果给出hdates，它会被用于转化后HistoryPanel的日期标签"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:7
msgid "转化后HistoryPanel的历史数据类型标签"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:9
msgid "转化后HistoryPanel的股票代码标签"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:11
msgid "DataFrame的column代表的数据类型，可以为 'shares' or 'htype' 如果为None，则必须输入htypes和shares参数中的一个"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:25
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:14
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.reset_config:10
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:35
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_overview:13
#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:18
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:60
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_stg:9
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:14
msgid "备注"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:19
msgid "由于DataFrame只有一个二维数组，因此一个DataFrame只能转化为以下两种HistoryPanel之一： 1，只有一个share，包含一个或多个htype的HistoryPanel，这时HistoryPanel的shape为(1, dates, htypes)"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:21
msgid "在这种情况下，htypes可以由一个列表，或逗号分隔字符串给出，也可以由DataFrame对象的column Name来生成，而share则必须给出"
msgstr ""

#: ../../../../qteasy/history.py:docstring of qteasy.history.dataframe_to_hp:22
msgid "2，只有一个dtype，包含一个或多个shares的HistoryPanel，这时HistoryPanel的shape为(shares, dates, 1) 具体转化为何种类型的HistoryPanel可以由column_type参数来指定，也可以通过给出hdates、htypes以及shares参数来由程序判断"
msgstr ""

#: ../../api/Operators.rst:2
msgid "Operator交易员 类"
msgstr ""

#: ../../api/Operators.rst:4
msgid "交易员类Operator:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:1
msgid "Operator(交易员)类，用于生成Operator对象，它是qteasy的核心对象。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:3
msgid "Operator是一个容器对象，它包含一系列交易策略，保存每一个交易策略所需的历史数据，并且可以调用所有交易策略，生成交易信号， 同时根据保存的规则把所有交易策略生成的信号混合起来，形成一组最终的交易信号。就像一个交易员在实际交易中的行为一样。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:6
msgid "创建一个Operator对象时，需要给出一组交易策略，并设定好交易员的交易模式和信号模式，交易模式和信号模式都是Operator对象最重要 的属性，他们共同决定了交易员的行为模式:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:17
msgid "strategies:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:12
msgid "一个列表，Operator对象包含的策略对象，可以给出自定义策略对象或内置 交易策略的id， 例如："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:15
msgid "['macd', 'dma']:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:16
msgid "一个包含两个内置交易策略的列表"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:17
msgid "[ExampleStrategy(), 'macd']"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:18
msgid "一个包含两个交易策略，其中第一个是自定义策略的列表"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:23
msgid "signal_type:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:22
msgid "交易信号模式，Operator支持三种不同的信号模式，分别如下："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:21
msgid "PT：positional target，生成的信号代表某种股票的目标仓位"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:22
msgid "PS：proportion signal，比例买卖信号，代表每种股票的买卖百分比"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:23
msgid "VS：volume signal，数量买卖信号，代表每种股票的计划买卖数量"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:24
msgid "在不同的信号模式下，交易信号代表不同的含义，交易的执行有所不同，具体含义见下文"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:31
msgid "op_type:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:31
msgid "运行类型，Operator对象有两种不同的运行类型："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:27
msgid "batch/b:         批量信号模式，此模式下交易信号是批量生成的，速度快效率高，但是"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:28
msgid "不支持某些特殊交易策略的模拟回测交易，也不支持实时交易"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:31
msgid "stepwise/step/s: 实时信号模式，此模式下使用最近的历史数据和交易相关数据生成一条"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:30
msgid "交易信号，生成的交易信号考虑当前持仓及最近的交易结果，支持各种 特殊交易策略，也可以用于实时交易"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:35
msgid "准备交易数据，为所有的交易策略分配交易数据，生成数据滑窗，以便生成交易信号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator:39
msgid "生成交易信号，在batch模式下，使用所有的数据生成完整交易信号清单，用于交易信号的模拟 回测交易 在stepwise模式下，利用数据滑窗和交易相关数据，生成一组交易信号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategies:1
msgid "添加多个Strategy交易策略到Operator对象中"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategies:3
msgid "使用这个方法，不能在添加交易策策略的同时修改交易策略的基本属性 输入参数strategies可以为一个列表或者一个逗号分隔字符串 列表中的元素可以为代表内置策略类型的字符串，或者为一个具体的策略对象 字符串和策略对象可以混合给出"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategies:8
msgid "交易策略的名称或者交易策略对象"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategy:1
msgid "添加一个strategy交易策略到operator对象中"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategy:3
msgid "如果调用本方法添加一个交易策略到Operator中，可以在添加的时候同时修改或指定交易策略的基本属性"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategy:5
msgid "需要添加的交易策略，也可以是内置交易策略的策略id或策略名称"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.add_strategy:7
msgid "任意合法的策略属性，可以在添加策略时直接给该策略属性赋值， 必须明确指定需要修改的属性名称，包含 - pars: dict or tuple, 策略可调参数 - opt_tag: int, 策略优化标签 - stg_type: int, 策略类型 - par_count: int, 策略参数个数 - par_types: list, 策略参数类型 - par_ranges: list, 策略参数范围 - data_freq: str, 策略数据频率 - window_length: int, 策略窗口长度 - strategy_run_freq: str, 策略采样频率 - strategy_data_types: list, 策略数据类型 - strategy_run_timing: str, 策略运行时机 - use_latest_data_cycle: bool, 策略是否使用最新数据周期"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.all_price_and_data_types:1
msgid "返回operator对象所有策略自对象的回测价格类型和交易清单历史数据类型的集合"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:1
msgid "在create_signal之前准备好相关历史数据，检查历史数据是否符合所有策略的要求："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:3
msgid "检查hist_data历史数据的类型正确； 检查cash_plan投资计划的类型正确； 检查hist_data是否为空（要求不为空）； 在hist_data中找到cash_plan投资计划中投资时间点的具体位置 检查cash_plan投资计划中的每个投资时间点均有价格数据，也就是说，投资时间点都在交易日内 检查cash_plan投资计划中第一次投资时间点前有足够的数据量，用于滚动回测 检查cash_plan投资计划中最后一次投资时间点在历史数据的范围内 从hist_data中根据各个量化策略的参数选取正确的历史数据切片放入各个策略数据仓库中 检查op_signal混合器的设置，根据op的属性设置正确的混合器，如果没有设置混合器，则生成一个"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:12
msgid "基础混合器（blender）"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:14
msgid "然后，根据operator对象中的不同策略所需的数据类型，将hist_data数据仓库中的相应历史数据 切片后保存到operator的各个策略历史数据属性中，供operator调用生成交易清单。包括："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:17
msgid "self._op_hist_data:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:18
msgid "交易历史数据的滑窗视图，滑动方向沿hdates，滑动间隔为1，长度为window_length"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:19
msgid "self._op_ref_data:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:20
msgid "交易参考数据的滑窗视图，滑动方向沿着hdates，滑动间隔为1，长度为window_length"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:23
msgid "self._op_sample_idx:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:22
msgid "交易信号采样点序号，默认情况下，Operator按照该序号从滑窗中取出部分，用于计算交易信号 在live模式下，该序号为[1]或者[0]，[1]表示该策略会被运行，[0]表示该策略不会被运行"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:5
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:26
msgid "Parameters:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:37
msgid "hist_data: HistoryPanel"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:28
msgid "历史数据,一个HistoryPanel对象，应该包含operator对象中的所有策略运行所需的历史数据，包含所有 个股所有类型的数据，"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:35
msgid "例如，operator对象中存在两个交易策略，分别需要的数据类型如下："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:34
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:71
msgid "策略A:   close, open, high 策略B:   close, eps"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:37
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:74
msgid "hist_data中就应该包含close、open、high、eps四种类型的数据 数据覆盖的时间段和时间频率也必须符合上述要求"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:40
msgid "cash_plan: CashPlan"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:40
msgid "一个投资计划，临时性加入，在这里仅检查CashPlan与历史数据区间是否吻合，是否会产生数据量不够的问题 在live_mode下不需要"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:44
msgid "reference_data: HistoryPanel"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:43
msgid "参考数据，默认None。一个HistoryPanel对象，这些数据被operator对象中的策略用于生成交易信号，但是与history_data 不同，参考数据与个股无关，可以被所有个股同时使用，例如大盘指数、宏观经济数据等都可以作为参考数据，某一个个股 的历史数据也可以被用作参考数据，参考数据可以被所有个股共享。reference_data包含所有策略所需的参考数据。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:47
msgid "live_mode: bool, default False"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:47
msgid "是否为实盘模式，如果为True，则不需要根据stg_timing设置op_sample_idx，而是直接根据live_running_stgs提供 的策略序号来设置op_sample_idx，如果为False，则根据stg_timing设置op_sample_idx"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:53
msgid "live_running_stgs: list, optional"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:50
msgid "在live模式下，live_running_stgs提供了一个策略序号列表，用于指定哪些策略会被运行，哪些策略不会被运行， 当live_mode为True时，live_running_stgs必须提供，否则会报错 live_running_stgs为一个包含若干策略id的列表，列表中的策略的op_sample_idx会被设置为[1]，其他策略的 op_sample_idx会被设置为[0]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:56
msgid "Returns:"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:57
msgid "None"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:61
msgid "该函数仅仅是将历史数据切片后保存到operator的各个策略历史数据属性中，供operator调用生成交易清单。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:62
msgid "该函数不会生成交易清单，也不会执行交易"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:63
msgid "该函数不会检查operator的可用性，也不会检查operator的属性是否正确，也不会检查operator的策略是否正确"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:67
msgid "关于hist_data的要求： 例如，operator对象中存在两个交易策略，分别需要的数据类型如下："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:77
msgid "关于reference_data的要求： 例如，operator对象中存在两个交易策略，分别需要的数据类型如下："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:81
msgid "策略A:   000300.SH (IDX) 策略B:   601993.SH (IDX)"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.assign_hist_data:84
msgid "reference_data中就应该包含000300.SH(IDX), 601993.SH(IDX)四种类型的数据 数据覆盖的时间段和时间频率也必须符合上述要求"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.bt_price_type_count:1
msgid "计算operator对象中所有子策略的不同回测价格类型的数量 to be deprecated"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.clear_strategies:1
msgid "清空Operator对象中的所有交易策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:1
msgid "生成交易信号。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:3
msgid "遍历Operator对象中的strategy对象，调用它们的generate方法生成策略交易信号 如果Operator对象拥有不止一个Strategy对象，则遍历所有策略，分别生成交易信号后，再混合成最终的信号 如果Operator拥有的Strategy对象交易执行价格类型不同，则需要分别混合，混合的方式可以相同，也可以不同"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:7
msgid "用于生成交易信号的历史数据存储在operator对象的几个属性中，在生成交易信号时直接调用。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:9
msgid "根据不同的sample_idx参数的类型，采取不同的工作模式生成交易信号："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:20
msgid "如果sample_idx为一个int或np.int时，进入stepwise模式，生成单组信号（单个价格类型上单一时间点混合信号）"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:12
msgid "从operator中各个strategy的全部历史数据滑窗中，找出第singal_idx组数据滑窗，仅生成一组用于特定 回测price_type价格类型的交易信号 例如，假设 sample_idx = 7, price_type_idx = 0 则提取出第7组数据滑窗，提取price_type序号为0的交易策略，并使用这些策略生成一组交易信号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:16
msgid "array[1, 0, 0, 0, 1]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:17
msgid "此时生成的是一个1D数组"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:19
msgid "为了确保只在sample采样时间点产生交易信号，需要比较sample_idx与operator的op_sample_indices， 只有sample_idx在op_sample_indices中时，才会产生交易信号，否则输出None"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:37
msgid "如果sample_idx为None（默认）或一个ndarray，进入batch模式，生成完整清单"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:23
msgid "生成一张完整的交易信号清单，此时，sample_idx必须是一个1D的int型向量，这个向量中的每 一个元素代表的滑窗会被提取出来生成相应的信号，其余的滑窗忽略，相应的信号设置为np.nan 例如，假设 sample_idx = np.array([0, 3, 7])T 生成一张完整的交易信号清单，清单中第0，3，7等三组信号为使用相应的数据滑窗生成，其余的信号 全部为np.nan："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:34
msgid "array[[  0,   0,   0,   0,   0],"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:29
msgid "[nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan], [  0,   0,   1,   0,   0], [nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan], [nan, nan, nan, nan, nan], [  1,   0,   0,   0,   1]]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:36
msgid "当sample_idx为None时，使用self._op_sample_idx的值为采样清单 此时生成的是一个3D数组"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:39
msgid "在生成交易信号之前需要调用assign_hist_data准备好相应的历史数据"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:41
msgid "输出一个ndarray，包含所有交易价格类型的各个个股的交易信号清单，一个3D矩阵 levels = shares columns = price_types rows = hdates"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:46
msgid "可选参数，交易过程数据，包括最近一次成交的数据以及最近一次交易信号，如果在回测过程中实时 产生交易信号，则可以将上述数据传入Operator，从而新一轮交易信号可以与上一次交易结果相关。 如果给出trade_date信号，trade_date中需要包含所有股票的交易信息，每列表示不同的交易价 格种类，其结构与生成的交易信号一致"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:51
msgid "交易信号序号。 如果参数为int型，则只计算该序号滑窗数据的交易信号 如果参数为array，则计算完整的交易信号清单"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:55
msgid "回测价格类型序号 如果给出sample_idx，必须给出这个参数 当给出一个price_type_idx时，不会激活所有的策略生成交易信号，而是只调用相关的策略生成 一组信号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:61
msgid "* **signal_value** (*np.ndarray*) * *使用对象的策略在历史数据期间的一个子集上产生的所有合法交易信号，该信号可以输出到回测* * *模块进行回测和评价分析，也可以输出到实盘操作模块触发交易操作* * *当sample_idx不是None时，必须给出一个int，此时price_type_idx也必须给出* * *此时输出为一个1D数组* * *当sample_idx为None时，会生成一张完整的*"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:61
msgid "**signal_value** (*np.ndarray*)"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:62
msgid "*使用对象的策略在历史数据期间的一个子集上产生的所有合法交易信号，该信号可以输出到回测*"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:63
msgid "*模块进行回测和评价分析，也可以输出到实盘操作模块触发交易操作*"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:64
msgid "*当sample_idx不是None时，必须给出一个int，此时price_type_idx也必须给出*"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:65
msgid "*此时输出为一个1D数组*"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.create_signal:66
msgid "*当sample_idx为None时，会生成一张完整的*"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.empty:1
msgid "检查operator是否包含任何策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_blender:1
msgid "返回operator对象中的多空蒙板混合器, 如果不指定price_type的话，输出完整的blender字典"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_blender:3
msgid "一个可用的price_type"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_blender:6
msgid "**blender** -- 如果price_type为None，则返回一个字典，其中包含所有的run_timing的blender 如果price_type不为None，则返回一个列表，其中包含该run_timing的blender"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_type_id_in_priority:1
msgid "根据字符串priority输出正确的回测交易价格ID"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_type_id_in_priority:3
msgid "优先级字符串 例如，当优先级为\"OHLC\"时，而price_types为['close', 'open']时 价格执行顺序为[1, 0], 表示先取第1列，再取第0列进行回测"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_type_id_in_priority:8
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_types_in_priority:8
msgid "**sequence** -- 返回一个list，包含每一个交易策略在回测时的执行先后顺序"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_types_in_priority:1
msgid "根据字符串priority输出正确的回测交易价格"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_bt_price_types_in_priority:3
msgid "优先级字符串 例如，当优先级为\"OHLC\"时，而price_types为['close', 'open']时 价格执行顺序为['open', 'close'], 表示先处理open价格，再处理'close'价格"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_combined_sample_indices:1
msgid "返回Operator对象所有交易信号采样点序列的并集"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_hdate_idx:1
msgid "给定一个hdate（字符串）返回它对应的index"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_hdate_idx:3
msgid "hdate为一个字符串，表示交易日期"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_hdate_idx:6
msgid "返回一个整数，表示hdate对应的index"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_price_type:1
msgid "返回Operator对象中每个strategy对应的交易信号历史数据，按price_type筛选"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_price_type:3
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_price_type:3
msgid "price_type是一个可选参数 如果给出price_type时，返回使用该price_type的所有策略的历史数据的rolling window"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_price_type:6
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_price_type:6
msgid "True时返回rolling_window数据，否则直接返回历史数据"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_price_type:9
msgid "返回一个list，包含operator对象运行所需的历史数据"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_run_timing:1
msgid "返回Operator对象中每个strategy对应的交易信号历史数据，timing是一个可选参数 如果给出timing时，返回使用该timing的所有策略的历史数据的rolling window"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_run_timing:4
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_run_timing:4
msgid "一个可用的timing, by default None"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_history_data_by_run_timing:6
msgid "True时返回rolling_window数据，否则直接返回历史数据, by default True"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_price_type:1
msgid "返回Operator对象中每个strategy对应的交易信号参考数据，按price_type筛选"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_price_type:9
msgid "返回一个list，包含operator对象运行所需的历史参考数据"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_ref_data_by_run_timing:1
msgid "返回Operator对象中每个strategy对应的交易信号参考数据，timing是一个可选参数 如果给出timing时，返回使用该timing的所有策略的参考数据"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_price_type:1
msgid "返回Operator对象中每个strategy对应的交易信号采样点序列，按price_type筛选"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_price_type:3
msgid "price_type为一个可选参数， 如果给出price_type时，返回使用该price_type的交易策略对应的交易采样点序列"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_price_type:7
msgid "返回一个list，包含operator中的strategy对象所需的交易信号采样点序列"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_op_sample_indices_by_run_timing:1
msgid "返回Operator对象中每个strategy对应的交易信号采样点序列，timing是一个可选参数 如果给出timing时，返回使用该timing的所有策略的信号采样点序列"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_price_type_idx:1
msgid "给定一个price_type（字符串）返回它对应的index"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_price_type_idx:3
msgid "price_type为一个字符串，表示价格类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_price_type_idx:6
msgid "返回一个整数，表示price_type对应的index"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_share_idx:1
msgid "给定一个share（字符串）返回它对应的index"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_share_idx:3
msgid "share为一个字符串，表示股票代码"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_share_idx:6
msgid "返回一个整数，表示share对应的index"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_stg:1
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_by_id:1
msgid "获取一个strategy对象, Operator[item]的另一种用法"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_stg:3
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_by_id:3
msgid "策略的名称或序号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_stg:10
msgid "1，当stg_id为int时，返回的是第stg_id个策略 2，当stg_id为str时，返回的是名称为stg_id的策略 3，当stg_id不符合要求时，返回最后一个策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_stg:26
msgid ":obj:`get_strategy_by_id`"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_price_type:1
msgid "返回operator对象中的strategy对象, 按price_type筛选"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_price_type:3
msgid "price_type为一个可选参数， 如果给出price_type时，返回使用该price_type的交易策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_price_type:7
msgid "返回一个list，包含operator对象中的strategy对象"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategies_by_run_timing:1
msgid "返回operator对象中的strategy对象, timing为一个可选参数， 如果给出timing时，返回使用该timing的交易策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_by_id:8
msgid ":obj:`get_stg`"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_count_by_price_type:1
msgid "返回operator中的交易策略的数量, price_type为一个可选参数， 如果给出price_type时，返回使用该price_type的交易策略数量"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_count_by_run_timing:1
msgid "返回operator中的交易策略的数量, timing为一个可选参数， 如果给出timing时，返回使用该timing的交易策略数量"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_id_by_price_type:1
msgid "返回operator对象中所有交易策略对象的ID, price_type为一个可选参数， 如果给出price_type时，返回使用该price_type的交易策略名称"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_id_by_run_timing:1
msgid "返回operator对象中所有交易策略对象的ID, timing为一个可选参数， 如果给出timing时，返回使用该timing的交易策略名称"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_id_pairs:1
msgid "返回一个generator，包含op中所有strategy和id对："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_names_by_price_type:1
msgid "返回operator对象中所有交易策略对象的名称, price_type为一个可选参数， 注意，strategy name并没有实际的作用，未来将被去掉 在操作operator对象时，引用某个策略实际使用的是策略的id，而不是name 如果给出price_type时，返回使用该price_type的交易策略名称"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.get_strategy_names_by_run_timing:1
msgid "返回operator对象中所有交易策略对象的名称, timing为一个可选参数， 注意，strategy name并没有实际的作用，未来将被去掉 在操作operator对象时，引用某个策略实际使用的是策略的id，而不是name 如果给出timing时，返回使用该timing的交易策略名称"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.info:1
msgid "打印出当前交易操作对象的信息，包括选股、择时策略的类型，策略混合方法、风险控制策略类型等等信息"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.info:3
msgid "如果策略包含更多的信息，还会打印出策略的一些具体信息，如选股策略的信息等 在这里调用了私有属性对象的私有属性，不应该直接调用，应该通过私有属性的公有方法打印相关信息 首先打印Operation木块本身的信息"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.info:7
msgid "是否打印出策略的详细信息, 如果为True, 则会打印出策略的详细信息，包括选股策略的信息等"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.is_ready:1
msgid "全面检查op是否可以开始运行，检查数据是否正确分配，策略属性是否合理，blender是否设置 策略参数是否完整。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.is_ready:3
msgid "如果op可以运行，返回True 如果op不可以运行，检查所有可能存在的问题，提出改进建议，汇总后raise ValueError"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.is_ready:6
msgid "如果True，当operator对象未准备好时，raise ValueError 如果False，当operator对象未准备好时，返回False"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.is_ready:10
msgid "如果operator对象准备好了，返回True"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.max_window_length:1
msgid "计算并返回operator对象所有子策略中最长的策略形成期。在准备回测或优化历史数据时，以此确保有足够的历史数据供策略形成"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_data_freq:1
msgid "返回operator对象所有策略子对象所需数据的采样频率 如果所有strategy的data_freq相同时，给出这个值，否则给出一个排序的列表"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_data_type_count:1
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_ref_type_count:1
msgid "返回operator对象生成交易清单所需的历史数据类型数量"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_data_type_list:1
msgid "返回一个列表，列表中的每个元素代表每一个策略所需的历史数据类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_data_types:1
msgid "返回operator对象所有策略子对象所需历史数据类型的集合"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_history_data:1
msgid "返回一个Dict，包含每个策略所需要的history_data，每个ndarray中包含了 可以用于生成交易信号的历史数据，且这些历史数据的类型与op_data_type_list 中规定的数据类型相同，历史数据跨度满足信号生成的需求"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list:1
msgid "生成的交易清单，包含了所有交易信号，以及交易信号对应的交易价格"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_hdates:1
msgid "生成的交易清单的hdates序号，交易清单的日期序号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_price_types:1
msgid "生成的交易清单的price_types，回测交易价格类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_shape:1
msgid "生成的交易清单的shape。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_shape:3
msgid "生成的交易清单的shape，包含三个维度的数据量"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_list_shares:1
msgid "生成的交易清单的shares序号，股票代码清单"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_ref_types:1
msgid "返回operator对象所有策略子对象所需历史参考数据类型reference_types的集合"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_reference_data:1
msgid "返回一个Dict，包含每个策略所需要的reference_data，用于生成相应的历史数据"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal:1
msgid "stepwise模式下单次生成的交易信号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal_hdate:1
msgid "stepwise模式下，单次生成的交易信号对应的日期 根据op_signal_hdate_idx查找"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal_hdate_idx:1
msgid "stepwise模式下，单次生成的交易信号对应的日期序号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal_price_type:1
msgid "stepwise模式下，单次生成的交易信号对应的价格类型 等同于op_signal_price_type_idx"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_signal_price_type_idx:1
msgid "stepwise模式下，单次生成的交易信号对应的价格类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.op_type:1
msgid "返回operator对象的运行类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_space_par:1
msgid "一次性返回operator对象中所有参加优化（opt_tag != 0）的子策略的参数空间Space信息"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_space_par:3
msgid "改属性的返回值是一个元组，包含ranges, types两个列表，这两个列表正好可以直接用作Space对象的创建参数，用于创建一个合适的 Space对象"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_space_par:6
msgid "一个完整的投资策略由三类多个不同的子策略组成。每个子策略都有自己特定的参数空间，它们的参数空间信息存储在stg.par_boes以及 stg.par_types等属性中。通常，我们在优化参数的过程中，希望仅对部分策略的参数空间进行搜索，而其他的策略保持参数不变。为了实现 这样的控制，我们可以给每一个子策略一个属性opt_tag优化标签，通过设置这个标签的值，可以控制这个子策略是否参与优化： {0: 'No optimization, 不参与优化，这个子策略在整个优化过程中将始终使用同一组参数',"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_space_par:10
msgid "1: 'Normal optimization, 普通优化，这个子策略在优化过程中使用不同的参数，这些参数都是从它的参数空间中按照规律取出的', 2: 'enumerate optimization, 枚举优化，在优化过程中使用不同的参数，但并非取自其参数空间，而是来自一个预设的枚举对象'}"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_space_par:13
msgid "这个函数遍历operator对象中所有子策略，根据其优化类型选择它的参数空间信息，组合成一个多维向量用于创建可以用于生成所有相关 策略的参数的高维空间"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_space_par:16
msgid "**ranges, types** -- 两个列表，分别包含了所有参与优化的策略的参数空间的范围和类型信息，这两个列表可以直接用作Space对象的创建参数，用于 创建一个合适的Space对象"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.opt_tags:1
msgid "返回所有策略的优化类型标签 该属性返回值是一个列表，按顺序列出所有交易策略的优化类型标签"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.ready:1
msgid "检查Operator对象是否已经准备好，可以开始生成交易信号"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.ready:5
msgid "返回True，表明Operator的各项属性已经具备以下条件："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.ready:4
msgid "1，Operator 已经有strategy 2，所有类型的strategy都有blender"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.remove_strategy:1
msgid "从Operator对象中移除一个交易策略, 删除时可以给出策略的id或者策略在Operator中的位置"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.run:1
msgid "运行Operator，返回运行结果，等同于qteasy.run(self, **kwargs)"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.run:3
msgid ":obj:`qteasy.run`"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:1
msgid "统一的blender混合器属性设置入口"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:3
msgid "一个合法的交易信号混合表达式当price_type为None时，可以接受list为参数， 同时为所有的price_type设置混合表达式"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:6
msgid "一个字符串，用于指定需要混合的交易信号的价格类型， 如果给出price_type则设置该price_type的策略的混合表达式 如果price_type为None，则设置所有price_type的策略的混合表达式，此时：     如果给出的blender为一个字符串，则设置所有的price_type为相同的表达式     如果给出的blender为一个列表，则按照列表中各个元素的顺序分别设置每一个price_type的混合表达式，     如果blender中的元素不足，则重复最后一个混合表达式"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:6
msgid "一个字符串，用于指定需要混合的交易信号的价格类型， 如果给出price_type则设置该price_type的策略的混合表达式 如果price_type为None，则设置所有price_type的策略的混合表达式，此时："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:9
msgid "如果给出的blender为一个字符串，则设置所有的price_type为相同的表达式 如果给出的blender为一个列表，则按照列表中各个元素的顺序分别设置每一个price_type的混合表达式， 如果blender中的元素不足，则重复最后一个混合表达式"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:16
msgid "如果给出的price_type不是正确的类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_blender:18
msgid "如果给出的price_type不存在，则给出warning并返回"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:1
msgid "optimizer接口函数，将输入的opt参数切片后传入stg的参数中"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:3
msgid "本函数与set_parameter()不同，在优化过程中非常有用，可以同时将参数设置到几个不同的策略中去，只要这个策略的opt_tag不为零 在一个包含多个Strategy的Operator中，可能同时有几个不同的strategy需要寻优。这时，为了寻找最优解，需要建立一个Space，包含需要寻优的 几个strategy的所有参数空间。通过这个space生成参数空间后，空间中的每一个向量实际上包含了不同的策略的参数，因此需要将他们原样分配到不 同的策略中。"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:8
msgid "一组参数，可能包含多个策略的参数，在这里被分配到不同的策略中"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:15
msgid "这里使用strategy.update_pars接口，不检查策略参数的合规性，因此需要提前确保参数符合strategy的设定"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:19
msgid "一个Operator对象有三个strategy，分别需要2， 3， 3个参数，而其中第一和第三个策略需要参数寻优，这个operator的所有策略参数可以写 成一个2+3+2维向量，其中下划线的几个是需要寻优的策略的参数："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:21
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:28
msgid "stg1:   stg2:       stg3: tag=1   tag=0       tag=1"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:23
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:30
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:41
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:48
msgid "[p0, p1, p2, p3, p4, p5, p6, p7]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:25
msgid "为了寻优方便，可以建立一个五维参数空间，用于生成五维参数向量："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:26
msgid "[v0, v1, v2, v3, v4]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:32
msgid "set_opt_par函数遍历Operator对象中的所有strategy函数，检查它的opt_tag值，只要发现opt_tag不为0，则将相应的参数赋值给strategy："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:32
msgid "[v0, v1]            [v2, v3, v4]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:34
msgid "在另一种情况下，一个策略的参数本身就以一个tuple的形式给出，一系列的合法参数组以enum的形式形成一个完整的参数空间，这时，opt_tag被 设置为2，此时参数空间中每个向量的一个分量就包含了完整的参数信息，例子如下："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:37
msgid "一个Operator对象有三个strategy，分别需要2， 3， 3个参数，而其中第一和第三个策略需要参数寻优，这个operator的所有策略参数可以写 成一个2+3+2维向量，其中下划线的几个是需要寻优的策略的参数，注意其中stg3的opt_tag被设置为2："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:39
#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:46
msgid "stg1:   stg2:       stg3: tag=1   tag=0       tag=2"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:43
msgid "为了寻优建立一个3维参数空间，用于生成五维参数向量："
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:44
msgid "[v0, v1, v2]，其中v2 = (i0, i1, i2)"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:49
msgid "set_opt_par函数遍历Operator对象中的所有strategy函数，检查它的opt_tag值，对于opt_tag==2的策略，则分配参数给这个策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_opt_par:50
msgid "[v0, v1]         v2=[i0, i1, i2]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:1
msgid "统一的策略参数设置入口，stg_id标识接受参数的具体成员策略，将函数参数中给定的策略参数赋值给相应的策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:3
msgid "策略的名称（ID），根据ID定位需要修改参数的策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:5
msgid "可调策略参数，格式为tuple 在创建一个策略的时候，可以设置部分策略参数为\"可调参数\"，这些参数的取值范围可以在策略优化 过程中进行调整，通过调整这些参数的组合，可以找到最优的策略参数组合，从而找到最优的策略"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:9
msgid "优化类型： 0: 不参加优化，在策略优化过程中不调整该策略的可调参数 1: 参加优化，在策略优化过程中根据优化算法主动调整策略参数以寻找最佳参数组合 2: 以枚举类型参加优化，在策略优化过程中仅从给定的参数组合种选取最优的参数组合"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:14
msgid "可调参数取值范围列表,一个包含若干tuple的列表,代表参数中一个元素的取值范围，如     [(0, 1), (0, 100), (0, 100)]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:15
msgid "可调参数取值范围列表,一个包含若干tuple的列表,代表参数中一个元素的取值范围，如"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:16
msgid "[(0, 1), (0, 100), (0, 100)]"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:18
msgid "可调参数类型列表，与par_range配合确定策略参数取值范围类型 int - 整数类型 float - 浮点数类型 enum - 枚举类型或给定列表中的元素"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:23
msgid "数据频率，策略本身所使用的数据的采样频率"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:25
msgid "运行频率，策略运行时进行信号生成的频率"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:27
msgid "策略的运行时机"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:29
msgid "窗口长度：策略计算的前视窗口长度"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:31
msgid "策略计算所需历史数据的数据类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.set_parameter:33
msgid "其他参数"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.signal_type:1
msgid "返回operator对象的信号类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.signal_type_id:1
msgid "以数字的形式返回operator对象的信号类型，便于loop中识别使用"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.strategies:1
msgid "以列表的形式返回operator对象的所有Strategy对象"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.strategy_blenders:1
msgid "返回operator对象中所有交易策略对象的混合表达式"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.strategy_count:1
msgid "返回operator对象中的所有Strategy对象的数量"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.strategy_ids:1
msgid "返回operator对象中所有交易策略对象的ID"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.strategy_timing_count:1
msgid "计算operator对象中所有子策略的不同回测价格类型的数量"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.Operator.strategy_timings:1
msgid "返回operator对象所有策略子对象的运行时间类型"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.view_blender:2
msgid "返回operator对象中的多空蒙板混合器的可读版本, 即返回blender的原始字符串的更加可读的"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.view_blender:2
msgid "版本，将s0等策略代码替换为策略ID，将blender string的各个token识别出来并添加空格分隔"
msgstr ""

#: ../../../../qteasy/qt_operator.py:docstring of qteasy.qt_operator.Operator.view_blender:4
msgid "一个可用的run_timing"
msgstr ""

#: ../../api/Strategies.rst:3
msgid "交易策略类"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:1
msgid "量化投资策略的抽象基类，所有策略都继承自该抽象类，本类定义了generate抽象方法模版，供具体的策略类调用"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:5
msgid "pars: any"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:6
msgid "策略可调参数，可以是任意类型。策略的优化过程，就是寻找策略可调参数的最优组合的过程。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:7
msgid "opt_tag: int {0, 1}"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:8
msgid "策略的优化标签，0表示不参与优化，1表示参与优化"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:9
msgid "par_count: int"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:10
msgid "策略可调参数的个数"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:11
msgid "par_types: [list, str]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:12
msgid "策略可调参数的类型，可以是一个列表，也可以是一个字符串，如果是字符串，则表示所有参数的类型都相同"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:13
msgid "par_range: [list, tuple]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:14
msgid "策略可调参数的取值范围，可以是一个列表，也可以是一个元组，如果是列表，则表示所有参数的取值范围都相同"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:15
msgid "stg_type: str"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:16
msgid "策略类型，用户自定义，用于区分不同的策略，例如均线策略、趋势跟随策略等"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:17
msgid "name: str"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:18
msgid "策略名称，用户自定义，用于区分不同的策略"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:19
msgid "description: str"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:20
msgid "策略描述，用户自定义，用于描述策略的基本原理"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:24
msgid "data_freq: str"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:22
msgid "策略所使用的数据的频率，可以是以下几种类型： 'd'：日线数据 'w'：周线数据 'm'：月线数据"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:29
msgid "sample_freq: str"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:27
msgid "策略的采样频率，可以是以下几种类型： 'd'：日线数据 'w'：周线数据 'm'：月线数据"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:31
msgid "window_length: int"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:32
msgid "策略所使用的数据的长度，即策略所使用的数据的长度，例如策略所使用的均线的长度"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:33
msgid "data_types: [str, list]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:34
msgid "策略所使用的数据的类型，可以是一个字符串，也可以是一个列表，如果是字符串，则表示所有数据的类型都相同"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:35
msgid "reference_data_types: [str, list]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:36
msgid "策略所使用的参考数据的类型，可以是一个字符串，也可以是一个列表，如果是字符串，则表示所有数据的类型都相同"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:42
msgid "bt_price_type: str"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:38
msgid "策略回测时的价格类型，可以是以下几种类型： 'open'：开盘价 'high'：最高价 'low'：最低价 'close'：收盘价"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.BaseStrategy:46
msgid "生成策略信号，该方法是策略的核心方法，所有的策略都必须实现该方法"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:1
msgid "通用交易策略类，用户可以使用策略输入的历史数据、参考数据和成交数据，自定信号生成规则，生成交易信号。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:3
msgid "策略的实现 要创建一个通用交易策略，需要创建一个GeneralStg策略类，并重写realize()方法，在其中定义交易信号 的生成规则，并在策略属性中定义相关的数据类型和策略的运行参数。这样就可以将策略用于实盘或回测了。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:13
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:7
msgid "推荐使用下面的方法创建策略类："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:9
msgid "Class ExampleStrategy(GeneralStg):"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:17
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:11
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:40
msgid "def realize(self, h, r=None, t=None, pars=None):"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:13
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:42
msgid "# 在这里编写信号生成逻辑 ... result = ... # result代表策略的输出"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:18
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:47
msgid "return result"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:26
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:20
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:49
msgid "用下面的方法创建一个策略对象："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:32
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:26
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:55
msgid "example_strategy = ExampleStrategy(pars=<example pars>,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:29
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:23
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:52
msgid "name='example', description='example strategy', strategy_data_types='close' ... )"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:34
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:28
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:57
msgid "在创建策略类的时候可以定义默认策略参数，详见qteasy的文档——创建交易策略"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:30
msgid "GeneralStg通用策略的参数如下，更详细的参数说明、取值范围和含义请参见qteasy文档："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:32
msgid "pars: tuple,            策略参数 opt_tag: int,           优化标记，策略是否参与参数优化 name: str,              策略名称 description: str,       策略简介 par_count: int,         策略参数个数 par_types: tuple/list,  策略参数类型 par_range:              策略参数取值范围 data_freq: str:         数据频率，用于生成策略输出所需的历史数据的频率 strategy_run_freq:            策略运行采样频率，即相邻两次策略生成的间隔频率。 window_length:          历史数据视窗长度。即生成策略输出所需要的历史数据的数量 strategy_data_types:             静态属性生成策略输出所需要的历史数据的种类，由以逗号分隔的参数字符串组成 strategy_run_timing:          策略回测时所使用的历史价格种类，可以定义为开盘、收盘、最高、最低价中的一种 reference_data_types:   参考数据类型，用于生成交易策略的历史数据，但是与具体的股票无关，可用于所有的股票的信号"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:52
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:45
msgid "生成，如指数、宏观经济数据等。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:70
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:47
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:59
msgid "编写策略规则，策略规则是通过realize()函数实现的，关于realize()函数更详细的介绍，请参见qteasy文档。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:72
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:49
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:61
msgid "realize()的定义："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:79
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:54
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:68
msgid "def realize(self,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:52
msgid "h: np.ndarray, r: np.ndarray, t: np.ndarray):"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:81
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:56
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:70
msgid "realize()中获取策略参数："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:83
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:89
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:58
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:72
msgid "par_1, par_2, ..., par_n = self.pars"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:91
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:60
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:152
msgid "realize()中获取历史数据及其他相关数据，关于历史数据的更多详细说明，请参考qteasy文档："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:93
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:62
msgid "h(history): 历史数据片段，shape为(M, N, L)，即："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:64
msgid "M层：   股票类型"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:66
msgid "N行：   交易日期/时间轴"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:68
msgid "L列：   历史数据类型轴"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:101
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:70
msgid "在realize()中获取历史数据可以使用切片的方法，获取的数据可用于策略。下面给出几个例子： 例如：设定："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:103
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:72
msgid "asset_pool = \"000001.SZ, 000002.SZ, 600001.SH\""
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:104
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:73
msgid "data_freq = 'd'"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:105
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:74
msgid "window_length = 100"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:106
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:75
msgid "strategy_data_types = \"open, high, low, close, pe\""
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:108
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:77
msgid "以下例子都基于前面给出的参数设定 例1，计算每只股票最近的收盘价相对于10天前的涨跌幅："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:79
msgid "close_last_day = h_seg[:, -1, 3] close_10_day = h_seg[:, -10, 3] rate_10 = (close_last_day / close_10_day) - 1"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:117
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:86
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:92
msgid "例2, 判断股票最近的收盘价是否大于10日内的最高价："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:84
msgid "max_10_day = h_seg[:, -10:-1, 1].max(axis=1) close_last_day = h_seg[:, -1, 3] penetrate = close_last_day > max_10_day"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:121
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:90
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:96
msgid "例3, 获取股票最近10日市盈率的平均值"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:89
msgid "pe_10_days = h_seg[:, -10:-1, 4] avg_pe = pe_10_days.mean(axis=1)"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:127
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:96
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:102
msgid "例4, 计算股票最近收盘价的10日移动平均价和50日移动平均价"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:93
msgid "close_10_days = h_seg[:, -10:-1, 3] close_50_days = h_seg[:, -50:-1, 3] ma_10 = close_10_days.mean(axis=1) ma_50 = close_10_days.mean(axis=1)"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:144
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:113
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:119
msgid "r(reference):参考历史数据，默认为None，shape为(N, L)"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:130
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:99
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:105
msgid "与每个个股并不直接相关，但是可以在生成交易信号时用做参考的数据，例如大盘数据，或者 宏观经济数据等，"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:133
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:102
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:108
msgid "N行, 交易日期/时间轴"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:135
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:104
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:110
msgid "L列，参考数据类型轴"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:144
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:113
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:119
msgid "以下是获取参考数据的几个例子："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:139
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:108
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:114
msgid "设定："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:108
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:114
msgid "reference_data_types = \"000300.SH.close, 000001.SH.close\""
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:141
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:110
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:116
msgid "例1: 获取最近一天的沪深300收盘价："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:142
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:111
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:117
msgid "close_300 = r[-1, 0]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:144
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:113
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:119
msgid "例2: 获取五天前的上证指数收盘价:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:144
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:113
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:119
msgid "close_SH = r[-5, 1]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:174
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:144
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:149
msgid "t(trade):交易历史数据，默认为None，shape为(N, 5)"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:147
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:116
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:122
msgid "最近几次交易的结果数据，2D数据。包含N行5列数据 如果交易信号不依赖交易结果（只有这样才能批量生成交易信号），t会是None。 数据的结构如下"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:152
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:121
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:127
msgid "N行， 股票/证券类型轴"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:152
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:121
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:127
msgid "每一列代表一只个股或证券"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:159
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:128
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:134
msgid "5列,  交易数据类型轴"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:155
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:124
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:130
msgid "0, own_amounts:              当前持有每种股票的份额"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:156
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:125
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:131
msgid "1, available_amounts:        当前可用的每种股票的份额"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:126
msgid "2, current_prices:           当前的股票价格"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:158
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:127
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:133
msgid "3, recent_amounts_change:    最近一次成交量（正数表示买入，负数表示卖出）"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:159
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:128
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:134
msgid "4, recent_trade_prices:      最近一次成交价格"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:161
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:130
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:136
msgid "示例：以下是在策略中获取交易数据的几个例子："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:168
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:137
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:143
msgid "例1: 获取所有股票最近一次成交的价格和成交量(1D array，没有成交时输出为nan)："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:164
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:133
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:139
msgid "volume = t[:, 3] trade_prices = t[:, 4] 或者: t = t.T volume = t[3] trade_prices = t[4]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:174
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:144
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:149
msgid "例2: 获取当前持有股票数量:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:171
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:140
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:146
msgid "own_amounts = t[:, 0] 或者: t = t.T own_amounts = t[0]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:146
msgid "realize()方法的输出： realize()方法的输出就是交易信号(1D ndarray),shape为(M,)，M为股票的个数，dtype为float ndarray中每个元素代表相应股票的操作信号。在不同的信号类型时，交易信号的含义不同："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:150
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:165
msgid "signal type   |         PT           |            PS           |       VS"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:152
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:167
msgid "sig > 1    |         N/A          |           N/A           | Buy in sig shares"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:153
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:168
msgid "1 >= sig > 0  | Buy to sig position  | Buy with sig% of cash   | Buy in sig shares"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:154
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:169
msgid "sig = 0    | Sell to hold 0 share |        Do Nothing       |     Do Nothing"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:156
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:171
msgid "0 > sig >= -1 |         N/A          | Sell sig% of share hold |  Sell sig shares"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:156
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:171
msgid "sig < -1    |         N/A          |           N/A           |  Sell sig shares"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:158
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:173
msgid "按照前述规则设置好策略的参数，并在realize函数中定义好逻辑规则后，一个策略就可以被添加到Operator 中，并产生交易信号了。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.GeneralStg:161
msgid "关于GeneralStg类的更详细说明，请参见qteasy的文档。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:2
msgid "因子排序选股策略，根据用户定义的选股因子筛选排序后确定每个股票的选股权重(请注意，FactorSorter策略"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:2
msgid "生成的交易信号在0到1之间，推荐设置signal_type为\"PT\")"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:4
msgid "这类策略要求用户从历史数据中提取一个选股因子，并根据选股因子的大小排序后确定投资组合中股票的交易信号 用户需要在realize()方法中计算选股因子，计算出选股因子后，接下来的排序和选股逻辑都不需要用户自行定义。 策略会根据预设的条件，从中筛选出符合标准的因子，并将剩下的因子排序，从中选择特定数量的股票，最后根据它 们的因子值分配权重或信号值。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:9
msgid "这些选股因子的排序和筛选条件，由6个选股参数来控制，因此用户只需要在策略属性中设置好相应的参数， 策略就可以根据选股因子输出交易信号了。用户只需要集中精力思考选股因子的定义逻辑即可，无需费时费力编写 因子的筛选排序取舍逻辑了。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:15
msgid "Class ExampleStrategy(FactorSorter):"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:19
msgid "# 在这里编写信号生成逻辑 ... factor = ... # factor代表策略输出的选股因子，用于进一步选股"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:24
msgid "return factor"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:36
msgid "与通用策略类不同，FactorSorter策略需要几个特殊属性用于确定选股行为（以下*者） 策略属性如下，更详细的参数说明、取值范围和含义请参见qteasy文档："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:39
msgid "pars:               tuple,  策略参数 opt_tag:            int,    优化标记，策略是否参与参数优化 name:               str,    策略名称 description:        str,    策略简介 par_count:          int,    策略参数个数 par_types:          tuple,  策略参数类型 par_range:          tuple,  策略参数取值范围 data_freq:          str:    数据频率，用于生成策略输出所需的历史数据的频率 strategy_run_freq:                策略运行采样频率，即相邻两次策略生成的间隔频率。 window_length:              历史数据视窗长度。即生成策略输出所需要的历史数据的数量 strategy_data_types:                 静态属性生成策略输出所需要的历史数据的种类，由以逗号分隔的参数字符串组成 strategy_run_timing:              策略回测时所使用的历史价格种类，可以定义为开盘、收盘、最高、最低价中的一种 reference_data_types:       参考数据类型，用于生成交易策略的历史数据，但是与具体的股票无关，可用于所有的股票的信号"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:53
msgid "*max_sel_count:     float,  选股限额，表示最多选出的股票的数量，默认值：0.5，表示选中50%的股票 *condition:         str ,   确定股票的筛选条件，默认值'any'"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:55
msgid "'any'        :默认值，选择所有可用股票 'greater'    :筛选出因子大于ubound的股票 'less'       :筛选出因子小于lbound的股票 'between'    :筛选出因子介于lbound与ubound之间的股票 'not_between':筛选出因子不在lbound与ubound之间的股票"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:60
msgid "*lbound:            float,  执行条件筛选时的指标下界, 默认值np.-inf *ubound:            float,  执行条件筛选时的指标上界, 默认值np.inf *sort_ascending:    bool,   排序方法，默认值: False, True: 优先选择因子最小的股票, False, 优先选择因子最大的股票 *weighting:         str ,   确定如何分配选中股票的权重"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:64
msgid "默认值: 'even' 'even'       :所有被选中的股票都获得同样的权重 'linear'     :权重根据因子排序线性分配 'distance'   :股票的权重与他们的指标与最低之间的差值（距离）成比例 'proportion' :权重与股票的因子分值成正比"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:75
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:64
msgid "h: np.ndarray, r: np.ndarray = None, t: np.ndarray = None, pars: tuple = None ):"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:89
msgid "或者："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:86
msgid "if pars is not None:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:87
msgid "par_1, par_2, ..., par_n = pars"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:89
msgid "else:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:95
msgid "M层：   M种股票的数据"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:97
msgid "N行：   历史数据时间跨度"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:99
msgid "L列：   L种历史数据类型"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:110
msgid "close_last_day = h[:, -1, 3] close_10_day = h[:, -10, 3] rate_10 = (close_last_day / close_10_day) - 1"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:115
msgid "max_10_day = h[:, -10:-1, 1].max(axis=1) close_last_day = h[:, -1, 3] penetrate = close_last_day > max_10_day"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:120
msgid "pe_10_days = h[:, -10:-1, 4] avg_pe = pe_10_days.mean(axis=1)"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:124
msgid "close_10_days = h[:, -10:-1, 3] close_50_days = h[:, -50:-1, 3] ma_10 = close_10_days.mean(axis=1) ma_50 = close_10_days.mean(axis=1)"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:139
msgid "reference_data_types = \"close-000300.SH, close-000001.SH\""
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:157
#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:132
msgid "2, current_prices:           当前的交易价格"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:176
msgid "realize()方法的输出： FactorSorter交易策略的输出信号为1D ndarray，这个数组不是交易信号，而是选股因子，策略会根据选股因子 自动生成股票的交易信号，通常交易信号类型应该为PT，即使用选股因子控制股票的目标仓位。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:181
msgid "output："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:181
msgid "np.array(arr), 如： np.array[0.1, 1.0, 10.0, 100.0]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:190
msgid "根据上述选股因子，FactorSorter()策略会根据其配置参数生成各个股票的目标仓位，"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:187
msgid "例如：当"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:185
msgid "max_sel_count=0.5 condition='greater', ubound=0.5, weighting='even'"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:190
msgid "时，上述因子的选股结果为:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:190
msgid "np.array[0.0, 0.0, 0.5, 0.5]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:192
msgid "在使用FactorSorter策略类时，建议将信号类型设置为PT,此时策略根据选股因子生成的交易信号含义如下:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:194
msgid "signal type   |         PT prefered type     |"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:196
msgid "sig > 1    |              N/A             |"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:197
msgid "1 >= sig > 0  |      Buy to sig position     |"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:198
msgid "sig = 0    |      Sell to hold 0 share    |"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:199
msgid "0 > sig >= -1 |             N/A              |"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:200
msgid "sig < -1    |             N/A              |"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.FactorSorter:201
msgid "关于Strategy类的更详细说明，请参见qteasy的文档。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:1
msgid "规则迭代策略类。这一类策略不考虑每一只股票的区别，将同一套规则同时迭代应用到所有的股票上。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:3
msgid "这类策略要求用户针对投资组合中的一个投资品种设计交易规则，在realize()方法定义该交易规则， 策略可以把同样的交易规则应用推广到投资组合中的所有投资品种上，同时可以采用不同的策略参数。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:8
msgid "pars:               tuple,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:9
msgid "策略参数"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:10
msgid "opt_tag:            int,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:11
msgid "优化标记，策略是否参与参数优化"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:12
msgid "name:               str,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:13
msgid "策略名称"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:14
msgid "description:        str,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:15
msgid "策略简介"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:16
msgid "par_count:          int,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:17
msgid "策略参数个数"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:18
msgid "par_types:          tuple,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:19
msgid "策略参数类型"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:20
msgid "par_range:          tuple,"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:21
msgid "策略参数取值范围"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:22
msgid "data_freq:          str:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:23
msgid "数据频率，用于生成策略输出所需的历史数据的频率"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:24
msgid "strategy_run_freq:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:25
msgid "策略运行采样频率，即相邻两次策略生成的间隔频率。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:26
msgid "window_length:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:27
msgid "历史数据视窗长度。即生成策略输出所需要的历史数据的数量"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:28
msgid "strategy_data_types:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:29
msgid "静态属性生成策略输出所需要的历史数据的种类，由以逗号分隔的参数字符串组成"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:30
msgid "strategy_run_timing:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:31
msgid "策略回测时所使用的历史价格种类，可以定义为开盘、收盘、最高、最低价中的一种"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:34
msgid "reference_data_types:"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:33
msgid "参考数据类型，用于生成交易策略的历史数据，但是与具体的股票无关，可用于所有 的股票的信号生成，如指数、宏观经济数据等。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:38
msgid "Class ExampleStrategy(RuleIterator):"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:0
msgid "input"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:102
msgid "h: 历史数据，一个2D numpy数组，包含一只股票在一个时间窗口内的所有类型的历史数据，"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:77
msgid "h 的shape为(N, L)，含义如下："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:79
msgid "N行：交易时间轴"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:80
msgid "L列： 历史数据类型轴"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:102
msgid "示例："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:83
msgid "以下例子都基于前面给出的参数设定 例1，计算最近的收盘价相对于10天前的涨跌幅："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:85
msgid "close_last_day = h_seg[-1, 3] close_10_day = h_seg[-10, 3] rate_10 = (close_last_day / close_10_day) - 1"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:90
msgid "max_10_day = h_seg[-10:-1, 1].max(axis=1) close_last_day = h_seg[-1, 3] penetrate = close_last_day > max_10_day"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:95
msgid "pe_10_days = h_seg[-10:-1, 4] avg_pe = pe_10_days.mean(axis=1)"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:99
msgid "close_10_days = h_seg[-10:-1, 3] close_50_days = h_seg[-50:-1, 3] ma_10 = close_10_days.mean(axis=1) ma_50 = close_10_days.mean(axis=1)"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:151
msgid ":output signals: 一个代表交易信号的数字，dtype为float"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:154
msgid "realize()方法的输出： realize()方法的输出就是交易信号，该交易信号是一个数字，策略会将其推广到整个投资组合："
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:157
msgid "def realize(): -> int"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:161
msgid "投资组合： [share1, share2, share3, share4]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:0
msgid "|       |       |"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:161
msgid "[ int1,    int2,   int3,   int4] -> np.array[ int1,    int2,   int3,   int4]"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:163
msgid "在不同的信号类型下，信号的含义不同。"
msgstr ""

#: ../../../../qteasy/strategy.py:docstring of qteasy.strategy.RuleIterator:176
msgid "关于Strategy类的更详细说明，请参见qteasy的文档。 RuleIterator 策略类继承了交易策略基类"
msgstr ""

#: ../../api/api_reference.rst:2
msgid "配置QTEASY"
msgstr ""

#: ../../api/api_reference.rst:4
msgid "查看qteasy的当前系统配置信息:"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:1
msgid "显示qt当前的配置变量，"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:3
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:3
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:3
msgid "需要显示的配置变量名称，如果不给出任何名称，则按level，up_to等方式显示所有的匹配的变量名 可以以逗号分隔字符串的形式给出一个或多个变量名，也可以list形式给出一个或多个变量名 以下两种方式等价： 'local_data_source, local_data_file_type, local_data_file_path' ['local_data_source', 'local_data_file_type', 'local_data_file_path']"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:9
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:9
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:9
msgid "需要显示的配置变量的级别。 如果给出了config，则忽略此参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:12
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:12
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:12
msgid "需要显示的配置变量的级别上限，需要配合level设置。 例如，当level == 0, up_to == 2时 会显示级别在0～2之间的所有配置变量 如果给出了config，则忽略此参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:17
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:17
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:17
msgid "是否显示配置变量的默认值，如果True，会同时显示配置变量的当前值和默认值"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:19
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:19
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:19
msgid "是否显示完整说明信息，如果True，会同时显示配置变量的详细说明"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configuration:26
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:26
msgid "使用示例参见get_config()"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_config:1
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.get_configurations:1
msgid "显示qt当前的配置变量，与get_config / configuration 相同"
msgstr ""

#: ../../api/api_reference.rst:12
msgid "修改qteasy的配置信息:"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:1
msgid "配置qteasy的运行参数QT_CONFIG"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:3
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:3
msgid "需要设置或调整参数的config对象，默认为None，此时直接对QT_CONFIG对象设置参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:5
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:5
msgid "默认值为False，为True时忽略传入的kwargs，将所有的参数设置为默认值"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:7
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:7
msgid "默认值False，如果为True，仅允许传入内部参数，False时允许传入任意参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:9
#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:9
msgid "需要设置的所有参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.configure:15
msgid "使用get_config()或configuration()查看当前的QT_CONFIG参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:1
msgid "配置qteasy的运行参数QT_CONFIG，等同于configure()"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.set_config:15
msgid "参见 configure()"
msgstr ""

#: ../../api/api_reference.rst:18
msgid "查看、修改或删除qteasy的启动配置内容："
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.start_up_settings:1
msgid "打印qteasy启动配置文件中存储的启动设置内容"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.update_start_up_setting:1
msgid "更新qteasy启动配置文件中存储的启动设置"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.update_start_up_setting:3
msgid "启动设置中可以包括系统定义配置参数以及用户自定义配置参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.update_start_up_setting:5
msgid "需要更新的配置参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.remove_start_up_setting:1
msgid "删除qteasy启动配置文件中存储的一项或者多项启动设置"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.remove_start_up_setting:3
msgid "必须给出需要删除的配置参数名称，可以同时删除多个配置参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.remove_start_up_setting:5
msgid "需要的配置参数名称清单"
msgstr ""

#: ../../api/api_reference.rst:26
msgid "将所有的配置变量重置为默认值:"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.reset_config:2
msgid "重设config对象，将所有的参数都设置为默认值"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.reset_config:2
msgid "如果config为None，则重设qt.QT_CONFIG"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.reset_config:4
msgid "需要重设的config对象"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.reset_config:11
msgid "等同于调用configure(config, reset=True)"
msgstr ""

#: ../../api/api_reference.rst:30
msgid "从文件中读取配置信息:"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:2
msgid "从文件file_name中读取相应的config参数，写入到config中，如果config为"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:2
msgid "None，则保存参数到QT_CONFIG中"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:4
msgid "一个config对象，默认None，如果不为None且为一个ConfigDict对象，则将读取的配置参数写入到config中"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:6
msgid "文件名，默认None，如果为None，文件名为saved_config.cfg"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:9
msgid "**config** -- 读取的配置参数"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.load_config:12
msgid "如果给定文件不存在，则报错。如果没有给定文件名，则当config/saved_config.cfg不存在时，报错"
msgstr ""

#: ../../api/api_reference.rst:34
msgid "将配置信息写入文件:"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:1
msgid "将config保存为一个文件 尚未实现的功能：如果initial_config为True，则将配置更新到初始化配置文件qteasy.cfg中()"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:4
msgid "一个config对象或者包含配配置变量的dict，如果为None，则保存qt.QT_CONFIG"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:6
msgid "文件名，如果为None，文件名为\"saved_config.cfg\""
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:8
msgid "默认True，覆盖重名文件，如果为False，当保存的文件已存在时，将报错"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:10
msgid "保配置变量到初始配置文件 qteasy.cfg 中，如果qteasy.cfg中已经存在部配置变量了，则覆盖相配置变量 TODO: 实现将配置变量写入qteasy.cfg初始配置文件的功能  由于目前使用pickle写入对象为二进制文件，而qteasy.cfg是文本文件，所以需要实现一个新的写入方式"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:10
msgid "保配置变量到初始配置文件 qteasy.cfg 中，如果qteasy.cfg中已经存在部配置变量了，则覆盖相配置变量 TODO: 实现将配置变量写入qteasy.cfg初始配置文件的功能"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:12
msgid "由于目前使用pickle写入对象为二进制文件，而qteasy.cfg是文本文件，所以需要实现一个新的写入方式"
msgstr ""

#: ../../../../qteasy/configure.py:docstring of qteasy.configure.save_config:15
msgid "**file_name** -- 保存的文件名"
msgstr ""

#: ../../api/api_reference.rst:39
msgid "qteasy的所有配置变量"
msgstr ""

#: ../../api/api_reference.rst:41
msgid "下面是qteasy的配置变量，可以通过qteasy.get_config()函数查看当前的配置信息，也可以通过qteasy.configure()函数修改配置信息。"
msgstr ""

#: ../../api/api_reference.rst:43
msgid "qteasy Configuration Variables"
msgstr ""

#: ../../api/api_reference.rst:47
msgid "**Name**"
msgstr ""

#: ../../api/api_reference.rst:48
msgid "**Level**"
msgstr ""

#: ../../api/api_reference.rst:49
msgid "**Default Value**"
msgstr ""

#: ../../api/api_reference.rst:50
msgid "**Description**"
msgstr ""

#: ../../api/api_reference.rst:51
msgid "``mode``"
msgstr ""

#: ../../api/api_reference.rst:52
#: ../../api/api_reference.rst:76
#: ../../api/api_reference.rst:80
#: ../../api/api_reference.rst:88
#: ../../api/api_reference.rst:95
#: ../../api/api_reference.rst:151
#: ../../api/api_reference.rst:159
#: ../../api/api_reference.rst:308
#: ../../api/api_reference.rst:354
#: ../../api/api_reference.rst:359
#: ../../api/api_reference.rst:491
#: ../../api/api_reference.rst:495
#: ../../api/api_reference.rst:530
#: ../../api/api_reference.rst:534
msgid "0"
msgstr ""

#: ../../api/api_reference.rst:53
#: ../../api/api_reference.rst:466
#: ../../api/api_reference.rst:487
#: ../../api/api_reference.rst:613
#: ../../api/api_reference.rst:623
msgid "``1``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "qteasy 的运行模式:"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "0: 实盘运行模式"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "1: 回测-评价模式"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "2: 策略优化模式"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "3: 统计预测模式"
msgstr ""

#: ../../api/api_reference.rst:59
msgid "``time_zone``"
msgstr ""

#: ../../api/api_reference.rst:60
#: ../../api/api_reference.rst:146
#: ../../api/api_reference.rst:187
#: ../../api/api_reference.rst:191
#: ../../api/api_reference.rst:195
#: ../../api/api_reference.rst:200
#: ../../api/api_reference.rst:204
#: ../../api/api_reference.rst:208
#: ../../api/api_reference.rst:212
#: ../../api/api_reference.rst:218
#: ../../api/api_reference.rst:224
#: ../../api/api_reference.rst:238
#: ../../api/api_reference.rst:245
#: ../../api/api_reference.rst:249
#: ../../api/api_reference.rst:253
#: ../../api/api_reference.rst:257
#: ../../api/api_reference.rst:261
#: ../../api/api_reference.rst:266
#: ../../api/api_reference.rst:271
#: ../../api/api_reference.rst:275
#: ../../api/api_reference.rst:313
#: ../../api/api_reference.rst:317
#: ../../api/api_reference.rst:379
#: ../../api/api_reference.rst:400
#: ../../api/api_reference.rst:411
msgid "4"
msgstr ""

#: ../../api/api_reference.rst:61
msgid "``local``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测时的时区，默认值\"local\"，表示使用本地时区。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "如果需要固定时区，设置任意合法的时区，例如："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "Asia/Shanghai"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "Asia/Hong_Kong"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "US/Eastern"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "US/Pacific"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "Europe/London"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "Europe/Paris"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "Australia/Sydney"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "Australia/Melbourne"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "Pacific/Auckland"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "Pacific/Chatham"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "etc."
msgstr ""

#: ../../api/api_reference.rst:75
msgid "``asset_pool``"
msgstr ""

#: ../../api/api_reference.rst:77
#: ../../api/api_reference.rst:285
msgid "``000300.SH``"
msgstr ""

#: ../../api/api_reference.rst:78
msgid "可用投资产品池，投资组合基于池中的产品创建"
msgstr ""

#: ../../api/api_reference.rst:79
msgid "``asset_type``"
msgstr ""

#: ../../api/api_reference.rst:81
#: ../../api/api_reference.rst:292
msgid "``IDX``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "投资产品的资产类型，包括："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "IDX  : 指数"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "E    : 股票"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "FT   : 期货"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "FD   : 基金"
msgstr ""

#: ../../api/api_reference.rst:87
msgid "``live_trade_account_id``"
msgstr ""

#: ../../api/api_reference.rst:89
#: ../../api/api_reference.rst:96
#: ../../api/api_reference.rst:112
#: ../../api/api_reference.rst:123
#: ../../api/api_reference.rst:369
#: ../../api/api_reference.rst:504
#: ../../api/api_reference.rst:546
msgid "``None``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实盘交易账户ID，用于实盘交易，如果指定了该参数，则会直接"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "使用该账户执行实盘交易，如果账户ID不存在，则会报错"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "如果不给出account_id，则必须给出live_trade_account_name"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "以创建一个新的账户ID"
msgstr ""

#: ../../api/api_reference.rst:94
msgid "``live_trade_account_name``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "用于实盘交易的账户名称，如果live_trade_account为None，则"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "必须创建新的账户ID，此时本参数必须给出，并设定account_name为"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "本参数的值"
msgstr ""

#: ../../api/api_reference.rst:100
msgid "``live_trade_debug_mode``"
msgstr ""

#: ../../api/api_reference.rst:101
#: ../../api/api_reference.rst:105
#: ../../api/api_reference.rst:111
#: ../../api/api_reference.rst:117
#: ../../api/api_reference.rst:122
#: ../../api/api_reference.rst:179
#: ../../api/api_reference.rst:183
#: ../../api/api_reference.rst:229
#: ../../api/api_reference.rst:279
#: ../../api/api_reference.rst:284
#: ../../api/api_reference.rst:291
#: ../../api/api_reference.rst:299
#: ../../api/api_reference.rst:303
#: ../../api/api_reference.rst:331
#: ../../api/api_reference.rst:336
#: ../../api/api_reference.rst:364
#: ../../api/api_reference.rst:499
#: ../../api/api_reference.rst:539
#: ../../api/api_reference.rst:604
#: ../../api/api_reference.rst:608
#: ../../api/api_reference.rst:612
msgid "1"
msgstr ""

#: ../../api/api_reference.rst:102
#: ../../api/api_reference.rst:201
#: ../../api/api_reference.rst:225
#: ../../api/api_reference.rst:380
msgid "``False``"
msgstr ""

#: ../../api/api_reference.rst:103
msgid "实盘交易调试模式，True: 调试模式，False: 正常模式"
msgstr ""

#: ../../api/api_reference.rst:104
msgid "``live_trade_init_cash``"
msgstr ""

#: ../../api/api_reference.rst:106
msgid "``1000000.0``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实盘交易账户的初始资金，浮点数，例如："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "1000000.0 : 初始资金为100万"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "1000000   : 初始资金为100万"
msgstr ""

#: ../../api/api_reference.rst:110
msgid "``live_trade_init_holdings``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实盘交易账户的初始持仓，字典，例如："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "{'000001.SZ': 1000, '000002.SZ': 2000} : 初始持仓为"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "000001.SZ: 1000股, 000002.SZ: 2000股"
msgstr ""

#: ../../api/api_reference.rst:116
msgid "``live_trade_broker_type``"
msgstr ""

#: ../../api/api_reference.rst:118
msgid "``simulator``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实盘交易账户的交易代理商类型，可以设置为模拟交易代理商返回交易结果、手动输入结果或者连接到交易代理商的交易接口"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "默认使用模拟交易代理Simulator"
msgstr ""

#: ../../api/api_reference.rst:121
msgid "``live_trade_broker_params``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实盘交易账户的交易代理商参数，字典，例如："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "{'host': 'localhost', 'port': 8888} : 交易代理商的主机名和端口号"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "具体的参数设置请参考交易代理商的文档"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "如果使用 'simulator' broker，且设置此参数为None，则会使用config中的"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "backtest参数"
msgstr ""

#: ../../api/api_reference.rst:129
msgid "``live_price_acquire_channel``"
msgstr ""

#: ../../api/api_reference.rst:130
#: ../../api/api_reference.rst:137
#: ../../api/api_reference.rst:167
#: ../../api/api_reference.rst:173
#: ../../api/api_reference.rst:321
#: ../../api/api_reference.rst:326
#: ../../api/api_reference.rst:341
#: ../../api/api_reference.rst:346
#: ../../api/api_reference.rst:350
#: ../../api/api_reference.rst:368
#: ../../api/api_reference.rst:503
#: ../../api/api_reference.rst:545
#: ../../api/api_reference.rst:567
#: ../../api/api_reference.rst:581
msgid "2"
msgstr ""

#: ../../api/api_reference.rst:131
msgid "``eastmoney``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实盘交易时获取实时价格的方式："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "eastmoney - 通过东方财富网获取实时价格"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "tushare  - 通过tushare获取实时价格(需要自行开通权限)"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "akshare  - Not Implemented: 从akshare获取实时价格"
msgstr ""

#: ../../api/api_reference.rst:136
msgid "``live_price_acquire_freq``"
msgstr ""

#: ../../api/api_reference.rst:138
msgid "``15MIN``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实盘交易时获取实时价格的频率："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "H      - 每1小时获取一次数据"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "30MIN  - 每30分钟获取一次数据"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "15MIN  - 每15分钟获取一次数据"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "5MIN   - 每5分钟获取一次数据"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "1MIN   - 每1分钟获取一次数据"
msgstr ""

#: ../../api/api_reference.rst:145
msgid "``watched_price_refresh_interval``"
msgstr ""

#: ../../api/api_reference.rst:147
#: ../../api/api_reference.rst:522
#: ../../api/api_reference.rst:640
msgid "``5``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实盘交易时监看实时价格的刷新频率，单位为秒，默认为5秒"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "该数值不能低于5秒"
msgstr ""

#: ../../api/api_reference.rst:150
msgid "``trade_batch_size``"
msgstr ""

#: ../../api/api_reference.rst:152
#: ../../api/api_reference.rst:160
#: ../../api/api_reference.rst:192
#: ../../api/api_reference.rst:322
#: ../../api/api_reference.rst:327
#: ../../api/api_reference.rst:351
#: ../../api/api_reference.rst:431
#: ../../api/api_reference.rst:438
msgid "``0.0``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "投资产品的最小申购批量大小，浮点数，例如："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "0. : 可以购买任意份额的投资产品，包括小数份额"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "1. : 只能购买整数份额的投资产品"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "100: 可以购买100的整数倍份额投资产品"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "n  : 可以购买的投资产品份额为n的整数倍，n不必为整数"
msgstr ""

#: ../../api/api_reference.rst:158
msgid "``sell_batch_size``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "投资产品的最小卖出或赎回批量大小，浮点数，例如："
msgstr ""

#: ../../api/api_reference.rst:166
msgid "``cash_decimal_places``"
msgstr ""

#: ../../api/api_reference.rst:168
#: ../../api/api_reference.rst:174
msgid "``2``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "现金的小数位数，例如："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "0: 现金只能为整数"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "2: 保留小数点后两位数字"
msgstr ""

#: ../../api/api_reference.rst:172
msgid "``amount_decimal_places``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "投资产品的份额的小数位数，例如："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "0: 份额只能为整数"
msgstr ""

#: ../../api/api_reference.rst:178
msgid "``riskfree_ir``"
msgstr ""

#: ../../api/api_reference.rst:180
msgid "``0.0035``"
msgstr ""

#: ../../api/api_reference.rst:181
msgid "无风险利率，如果选择\"考虑现金的时间价值\"，则回测时现金按此年利率增值"
msgstr ""

#: ../../api/api_reference.rst:182
msgid "``parallel``"
msgstr ""

#: ../../api/api_reference.rst:184
#: ../../api/api_reference.rst:280
#: ../../api/api_reference.rst:304
#: ../../api/api_reference.rst:309
#: ../../api/api_reference.rst:314
#: ../../api/api_reference.rst:318
#: ../../api/api_reference.rst:412
#: ../../api/api_reference.rst:609
msgid "``True``"
msgstr ""

#: ../../api/api_reference.rst:185
msgid "如果True，策略参数寻优时将利用多核心CPU进行并行计算提升效率"
msgstr ""

#: ../../api/api_reference.rst:186
msgid "``hist_dnld_parallel``"
msgstr ""

#: ../../api/api_reference.rst:188
#: ../../api/api_reference.rst:631
msgid "``16``"
msgstr ""

#: ../../api/api_reference.rst:189
msgid "下载历史数据时启用的线程数量，为0或1时采用单线程下载，大于1时启用多线程"
msgstr ""

#: ../../api/api_reference.rst:190
msgid "``hist_dnld_delay``"
msgstr ""

#: ../../api/api_reference.rst:193
msgid "为防止服务器数据压力过大，下载历史数据时下载一定数量的数据后延迟的时间长度，单位为秒"
msgstr ""

#: ../../api/api_reference.rst:194
msgid "``hist_dnld_delay_evy``"
msgstr ""

#: ../../api/api_reference.rst:196
#: ../../api/api_reference.rst:459
msgid "``0``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "为防止服务器数据压力过大，下载历史数据时，每下载一定数量的数据，就延迟一段时间。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "此参数为两次延迟之间的数据下载量"
msgstr ""

#: ../../api/api_reference.rst:199
msgid "``hist_dnld_prog_bar``"
msgstr ""

#: ../../api/api_reference.rst:202
msgid "下载历史数据时是否显示进度条"
msgstr ""

#: ../../api/api_reference.rst:203
msgid "``hist_dnld_retry_cnt``"
msgstr ""

#: ../../api/api_reference.rst:205
msgid "``7``"
msgstr ""

#: ../../api/api_reference.rst:206
msgid "下载历史数据失败时的自动重试次数"
msgstr ""

#: ../../api/api_reference.rst:207
msgid "``hist_dnld_retry_delay``"
msgstr ""

#: ../../api/api_reference.rst:209
#: ../../api/api_reference.rst:386
msgid "``1.0``"
msgstr ""

#: ../../api/api_reference.rst:210
msgid "下载历史数据失败时的自动重试前的延迟时间，单位为秒"
msgstr ""

#: ../../api/api_reference.rst:211
msgid "``hist_dnld_backoff``"
msgstr ""

#: ../../api/api_reference.rst:213
msgid "``2.0``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "下载历史数据失败时的自动重试的延迟时间倍增乘数"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "例如，设置hist_dnld_backoff = 2时，每次重试失败"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "后延迟时间会变为前一次的2倍"
msgstr ""

#: ../../api/api_reference.rst:217
msgid "``auto_dnld_hist_tables``"
msgstr ""

#: ../../api/api_reference.rst:219
msgid "``[]``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "在实盘运行时自动下载的历史数据表名列表，例如："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "[\"stock_daily\", \"index_weekly\", \"stock_monthly\"]"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "如果列表为空，则不自动下载任何历史数据"
msgstr ""

#: ../../api/api_reference.rst:223
msgid "``gpu``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "如果True，策略参数寻优时使用GPU加速计算"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "<本功能目前尚未实现! NotImplemented>"
msgstr ""

#: ../../api/api_reference.rst:228
msgid "``local_data_source``"
msgstr ""

#: ../../api/api_reference.rst:230
msgid "``file``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "确定本地历史数据存储方式："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "file     - 历史数据以本地文件的形式存储，"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "文件格式在\"local_data_file_type\"属性中指定，包括csv/hdf等多种选项"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "database - 历史数据存储在一个mysql数据库中"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "选择此选项时，需要在配置文件中配置数据库的连接信息"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "db       - 等同于\"database\""
msgstr ""

#: ../../api/api_reference.rst:237
msgid "``local_data_file_type``"
msgstr ""

#: ../../api/api_reference.rst:239
msgid "``csv``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "确定本地历史数据文件的存储格式："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "csv - 历史数据文件以csv形式存储，速度较慢但可以用Excel打开"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "hdf - 历史数据文件以hd5形式存储，数据存储和读取速度较快"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "feather/fth - 历史数据文件以feather格式存储，数据交换速度快但不适用长期存储"
msgstr ""

#: ../../api/api_reference.rst:244
msgid "``local_data_file_path``"
msgstr ""

#: ../../api/api_reference.rst:246
msgid "``data/``"
msgstr ""

#: ../../api/api_reference.rst:247
msgid "确定本地历史数据文件存储路径"
msgstr ""

#: ../../api/api_reference.rst:248
msgid "``local_db_host``"
msgstr ""

#: ../../api/api_reference.rst:250
msgid "``localhost``"
msgstr ""

#: ../../api/api_reference.rst:251
msgid "用于存储历史数据的数据库的主机名，该数据库应该为mysql数据库或MariaDB"
msgstr ""

#: ../../api/api_reference.rst:252
msgid "``local_db_port``"
msgstr ""

#: ../../api/api_reference.rst:254
msgid "``3306``"
msgstr ""

#: ../../api/api_reference.rst:255
msgid "用于存储历史数据的数据库的端口号，默认值为mysql数据库的端口号3306"
msgstr ""

#: ../../api/api_reference.rst:256
msgid "``local_db_name``"
msgstr ""

#: ../../api/api_reference.rst:258
msgid "``qt_db``"
msgstr ""

#: ../../api/api_reference.rst:259
msgid "用于存储历史数据的数据库名，默认值为\"qt_db\""
msgstr ""

#: ../../api/api_reference.rst:260
msgid "``local_db_user``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "访问数据库的用户名，该用户需具备足够的操作权限"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "建议通过配置文件配置数据库用户名和密码"
msgstr ""

#: ../../api/api_reference.rst:265
msgid "``local_db_password``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "数据库的访问密码"
msgstr ""

#: ../../api/api_reference.rst:270
msgid "``sys_log_file_path``"
msgstr ""

#: ../../api/api_reference.rst:272
msgid "``syslog/``"
msgstr ""

#: ../../api/api_reference.rst:273
msgid "系统运行日志及错误日志的存储路径"
msgstr ""

#: ../../api/api_reference.rst:274
msgid "``trade_log_file_path``"
msgstr ""

#: ../../api/api_reference.rst:276
msgid "``tradelog/``"
msgstr ""

#: ../../api/api_reference.rst:277
msgid "明细交易日志的存储路径"
msgstr ""

#: ../../api/api_reference.rst:278
msgid "``trade_log``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "是否生成明细交易清单，以pd.DataFrame形式给出明细的每日交易清单"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "包括交易信号以及每一步骤的交易结果"
msgstr ""

#: ../../api/api_reference.rst:283
msgid "``benchmark_asset``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "用来产生回测结果评价结果基准收益的资产类型，默认基准为沪深300指数"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "基准指数用来生成多用评价结果如alpha、beta比率等，因为这些指标除了考察投资收益的"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "绝对值意外，还需要考虑同时期的市场平均表现，只有当投资收益优于市场平均表现的，才会"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "被算作超额收益或alpha收益，这才是投资策略追求的目标"
msgstr ""

#: ../../api/api_reference.rst:290
msgid "``benchmark_asset_type``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "基准收益的资产类型，包括："
msgstr ""

#: ../../api/api_reference.rst:298
msgid "``benchmark_dtype``"
msgstr ""

#: ../../api/api_reference.rst:300
msgid "``close``"
msgstr ""

#: ../../api/api_reference.rst:301
msgid "作为基准收益的资产的价格类型。"
msgstr ""

#: ../../api/api_reference.rst:302
msgid "``report``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "为True时打印运行结果报告"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "实时模式显示策略运行报告，回测模式显示回测结果报告，优化模式显示优化结果报告"
msgstr ""

#: ../../api/api_reference.rst:307
msgid "``visual``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "为True时使用图表显示可视化运行结果"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "（回测模式显示回测报告，优化模式显示优化结果报告）"
msgstr ""

#: ../../api/api_reference.rst:312
msgid "``buy_sell_points``"
msgstr ""

#: ../../api/api_reference.rst:315
msgid "为True时在回测图表中显示买卖点，使用红色和绿色箭头标示出买卖点的位置"
msgstr ""

#: ../../api/api_reference.rst:316
msgid "``show_positions``"
msgstr ""

#: ../../api/api_reference.rst:319
msgid "为True时在回测图表中用色带显示投资仓位"
msgstr ""

#: ../../api/api_reference.rst:320
msgid "``cost_fixed_buy``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "买入证券或资产时的固定成本或固定佣金，该金额不随买入金额变化"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "默认值为10元"
msgstr ""

#: ../../api/api_reference.rst:325
msgid "``cost_fixed_sell``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "卖出证券或资产时的固定成本或固定佣金，该金额不随卖出金额变化"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "默认值为0"
msgstr ""

#: ../../api/api_reference.rst:330
msgid "``cost_rate_buy``"
msgstr ""

#: ../../api/api_reference.rst:332
msgid "``0.0003``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "买入证券或资产时的成本费率或佣金比率，以买入金额的比例计算"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "默认值为万分之三"
msgstr ""

#: ../../api/api_reference.rst:335
msgid "``cost_rate_sell``"
msgstr ""

#: ../../api/api_reference.rst:337
msgid "``0.0001``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "卖出证券或资产时的成本费率或佣金比率，以卖出金额的比例计算"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "默认值为万分之一"
msgstr ""

#: ../../api/api_reference.rst:340
msgid "``cost_min_buy``"
msgstr ""

#: ../../api/api_reference.rst:342
#: ../../api/api_reference.rst:347
msgid "``5.0``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "买入证券或资产时的最低成本或佣金，买入佣金只能大于或等于该最低金额"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "默认值为5元"
msgstr ""

#: ../../api/api_reference.rst:345
msgid "``cost_min_sell``"
msgstr ""

#: ../../api/api_reference.rst:348
msgid "卖出证券或资产时的最低成本或佣金，卖出佣金只能大于或等于该最低金额"
msgstr ""

#: ../../api/api_reference.rst:349
msgid "``cost_slippage``"
msgstr ""

#: ../../api/api_reference.rst:352
msgid "交易滑点，一个预设参数，模拟由于交易延迟或交易金额过大产生的额外交易成本"
msgstr ""

#: ../../api/api_reference.rst:353
msgid "``invest_start``"
msgstr ""

#: ../../api/api_reference.rst:355
#: ../../api/api_reference.rst:492
msgid "``20160405``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测模式下的回测开始日期"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "格式为\"YYYYMMDD\""
msgstr ""

#: ../../api/api_reference.rst:358
msgid "``invest_end``"
msgstr ""

#: ../../api/api_reference.rst:360
#: ../../api/api_reference.rst:535
msgid "``20210201``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测模式下的回测结束日期"
msgstr ""

#: ../../api/api_reference.rst:363
msgid "``invest_cash_amounts``"
msgstr ""

#: ../../api/api_reference.rst:365
#: ../../api/api_reference.rst:500
#: ../../api/api_reference.rst:540
msgid "``[100000.0]``"
msgstr ""

#: ../../api/api_reference.rst:366
msgid "投资的金额，一个tuple或list，每次投入资金的金额，多个数字表示多次投入"
msgstr ""

#: ../../api/api_reference.rst:367
msgid "``invest_cash_dates``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测操作现金投入的日期，一个str或list，多个日期表示多次现金投入。默认为None"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "当此参数为None时，现金投入日期与invest_start相同，当参数不为None时，此参数覆盖"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "invest_start"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "参数输入类型为str时，格式为\"YYYYMMDD\""
msgstr ""

#: ../../api/api_reference.rst:0
msgid "如果需要模拟现金多次定投投入，或者多次分散投入，则可以输入list类型或str类型"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "以下两种输入方式等效："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"20100104,20100202,20100304\" ="
msgstr ""

#: ../../api/api_reference.rst:0
msgid "[\"20100104\", \"20100202\", \"20100304\"]"
msgstr ""

#: ../../api/api_reference.rst:378
msgid "``allow_sell_short``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "是否允许卖空交易，："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "False - 默认值，不允许卖空操作，卖出数量最多仅为当前可用持仓数量"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "True -  允许卖空，卖出数量大于持仓量时，即持有空头仓位"
msgstr ""

#: ../../api/api_reference.rst:384
msgid "``long_position_limit``"
msgstr ""

#: ../../api/api_reference.rst:385
#: ../../api/api_reference.rst:393
#: ../../api/api_reference.rst:420
#: ../../api/api_reference.rst:430
#: ../../api/api_reference.rst:437
#: ../../api/api_reference.rst:444
#: ../../api/api_reference.rst:450
#: ../../api/api_reference.rst:458
#: ../../api/api_reference.rst:465
#: ../../api/api_reference.rst:470
#: ../../api/api_reference.rst:474
#: ../../api/api_reference.rst:478
#: ../../api/api_reference.rst:482
#: ../../api/api_reference.rst:486
#: ../../api/api_reference.rst:513
#: ../../api/api_reference.rst:521
#: ../../api/api_reference.rst:525
#: ../../api/api_reference.rst:555
#: ../../api/api_reference.rst:590
#: ../../api/api_reference.rst:594
#: ../../api/api_reference.rst:599
#: ../../api/api_reference.rst:622
#: ../../api/api_reference.rst:626
#: ../../api/api_reference.rst:630
#: ../../api/api_reference.rst:634
#: ../../api/api_reference.rst:639
#: ../../api/api_reference.rst:643
#: ../../api/api_reference.rst:647
#: ../../api/api_reference.rst:651
msgid "3"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测过程中允许交易信号建立的多头仓位百分比的极限值，即允许动用"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "总资产（包括现金和持有股票的总额）的多少百分比用于持有多头仓位，"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "默认值1.0，即100%"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "如果设置值大于1，则表示允许超过持有现金建仓，这种情况会产生负现金"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "余额，表示产生了借贷"
msgstr ""

#: ../../api/api_reference.rst:392
msgid "``short_position_limit``"
msgstr ""

#: ../../api/api_reference.rst:394
msgid "``-1.0``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测过程中允许交易信号建立的空头仓位百分比的极限值，即允许持有的"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "空头仓位占当前净资产总额的最高比例限额，默认值-1.0，即最多允许借入"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "相当于净资产总额100%价值的股票并持有空头仓位，此时持有负股票份额且"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "产生正现金流入"
msgstr ""

#: ../../api/api_reference.rst:399
msgid "``backtest_price_adj``"
msgstr ""

#: ../../api/api_reference.rst:401
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:4
msgid "``none``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测时的复权价格处理方法："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "股票分红除权的处理，正常来说，应该在股票分红除权时计算分红和派息对持仓"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "数量和现金的影响，但是目前这种处理方法比较复杂，暂时先采用比较简单的方"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "法，即直接采用复权价格进行回测，目前处理方法有两种"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- none/n - 默认值，不使用复权价格，但也不处理派息，这只是临时处理，因"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "为长期回测不考虑除权派息将会导致回测结果与实际相差巨大"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- back/b - 使用后复权价格回测，可以弥补不考虑分红派股的不足"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- adj    - 使用前复权价格回测。"
msgstr ""

#: ../../api/api_reference.rst:410
msgid "``maximize_cash_usage``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测交易时是否最大化利用同一批次交易获得的现金。即优先卖出股票并将获得的现金立即"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "用于同一批次的买入交易，以便最大限度利用可用现金。当现金的交割期大于0时无效。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- True -  默认值，首先处理同一批次交易中的卖出信号，并在可能时将获得的现金"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "立即用于本次买入"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- False - 同批次买入和卖出信号同时处理，不立即使用卖出资产的现金将同一批"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "次交易委托同时提交时，这是正常情况"
msgstr ""

#: ../../api/api_reference.rst:419
msgid "``PT_signal_timing``"
msgstr ""

#: ../../api/api_reference.rst:421
msgid "``lazy``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测信号模式为PT（position target）时，控制检查实际持仓比例并自动生成交易"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "信号的时机，默认normal"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- aggressive: 在整个策略运行时间点上都会产生交易信号，不论此时PT信号是否发"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "生变化，实时监控实际持仓与计划持仓之间的差异，只要二者发生偏"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "离，就产生信号"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- lazy:       在策略运行时间点上，只有当持仓比例发生变化时，才会产生交易"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "信号，不实时监控实际持仓与计划持仓的差异"
msgstr ""

#: ../../api/api_reference.rst:429
msgid "``PT_buy_threshold``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测信号模式为PT（position target）时，触发买入信号的仓位差异阈值"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "在这种模式下，当持有的投资产品的仓位比目标仓位低，且差额超过阈值时，触发买入信号"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "例如当卖出阈值为0.05即5%时，若目标持仓30%，那么只有当实际持仓<=25%时，才会产生"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "交易信号，即此时实际持仓与目标持仓之间的差值大于5%了"
msgstr ""

#: ../../api/api_reference.rst:436
msgid "``PT_sell_threshold``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测信号模式为PT（position target）时，触发卖出信号的仓位差异阈值"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "在这种模式下，当持有的投资产品的仓位比目标仓位高，且差额超过阈值时，触发卖出信号"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "例如当卖出阈值为0.05即5%时，若目标持仓30%，那么只有当实际持仓>=35%时，才会产生"
msgstr ""

#: ../../api/api_reference.rst:443
msgid "``price_priority_OHLC``"
msgstr ""

#: ../../api/api_reference.rst:445
msgid "``OHLC``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测时如果存在多种价格类型的交易信号，而且交易价格的类型为OHLC时，处理各种"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "不同的价格信号的优先级。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "输入类型为字符串，O、H、L、C、A分别代表Open,High,Low,Close,Nav"
msgstr ""

#: ../../api/api_reference.rst:449
msgid "``price_priority_quote``"
msgstr ""

#: ../../api/api_reference.rst:451
msgid "``normal``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测时如果存在多种价格类型的交易信号，而且交易价格的类型为实时报价时，回测程序处理"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "输入包括\"normal\" 以及 \"reverse\"两种，分别表示："
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- \"normal\"：  优先处理更接近成交价的报价，如卖1/买1等"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "- \"reverse\"： 优先处理更远离成交价的报价，如卖5/买5等"
msgstr ""

#: ../../api/api_reference.rst:457
msgid "``cash_delivery_period``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测时卖出股票获得现金的交割周期，用一个数字N代表交易日后第N天可以完成现金交割。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "获得现金后立即计入总资产，但在途资金（尚未交割的资金）不能用于下一笔交易"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "当现金交割期为零时，可以选择在同一轮交易中先卖出资产获得尽可能多的现金用于本轮"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "买入"
msgstr ""

#: ../../api/api_reference.rst:464
msgid "``stock_delivery_period``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测时买入股票后的股票交割周期，用一个数字N代表交易日后第N天可以完成资产交割。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "获得股票后立即计入总资产，但尚未交割的股票不能用于下一笔交易"
msgstr ""

#: ../../api/api_reference.rst:469
msgid "``market_open_time_am``"
msgstr ""

#: ../../api/api_reference.rst:471
msgid "``09:30:00``"
msgstr ""

#: ../../api/api_reference.rst:472
msgid "交易市场上午开市时间"
msgstr ""

#: ../../api/api_reference.rst:473
msgid "``market_close_time_am``"
msgstr ""

#: ../../api/api_reference.rst:475
msgid "``11:30:00``"
msgstr ""

#: ../../api/api_reference.rst:476
msgid "交易市场上午收市时间"
msgstr ""

#: ../../api/api_reference.rst:477
msgid "``market_open_time_pm``"
msgstr ""

#: ../../api/api_reference.rst:479
msgid "``13:00:00``"
msgstr ""

#: ../../api/api_reference.rst:480
msgid "交易市场下午开市时间"
msgstr ""

#: ../../api/api_reference.rst:481
msgid "``market_close_time_pm``"
msgstr ""

#: ../../api/api_reference.rst:483
msgid "``15:00:00``"
msgstr ""

#: ../../api/api_reference.rst:484
msgid "交易市场下午收市时间"
msgstr ""

#: ../../api/api_reference.rst:485
msgid "``strategy_open_close_timing_offset``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "策略信号的开盘/收盘运行时间偏移量，单位为分钟，当策略信号运行时机为开盘/收盘，需要提前/推迟"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "一个偏移量运行，避免无法交易。"
msgstr ""

#: ../../api/api_reference.rst:490
msgid "``opti_start``"
msgstr ""

#: ../../api/api_reference.rst:493
msgid "优化模式下的策略优化区间开始日期"
msgstr ""

#: ../../api/api_reference.rst:494
msgid "``opti_end``"
msgstr ""

#: ../../api/api_reference.rst:496
msgid "``20191231``"
msgstr ""

#: ../../api/api_reference.rst:497
msgid "优化模式下的策略优化区间结束日期"
msgstr ""

#: ../../api/api_reference.rst:498
msgid "``opti_cash_amounts``"
msgstr ""

#: ../../api/api_reference.rst:501
msgid "优化模式投资的金额，一个tuple或list，每次投入资金的金额，多个数字表示多次投入"
msgstr ""

#: ../../api/api_reference.rst:502
msgid "``opti_cash_dates``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "策略优化区间现金投入的日期，一个str或list，多个日期表示多次现金投入。默认为None"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"20100104,20100202,20100304\"[\"20100104\", \"20100202\", \"20100304\"]"
msgstr ""

#: ../../api/api_reference.rst:512
msgid "``opti_type``"
msgstr ""

#: ../../api/api_reference.rst:514
#: ../../api/api_reference.rst:556
msgid "``single``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "优化类型。指优化数据的利用方式:"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"single\"   - 在每一回合的优化测试中，在优化区间上进行覆盖整个区间的单次回测并评价"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "回测结果"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"multiple\" - 在每一回合的优化测试中，将优化区间的数据划分为多个子区间，在这些子"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "区间上分别测试，并根据所有测试的结果确定策略在整个区间上的评价结果"
msgstr ""

#: ../../api/api_reference.rst:520
msgid "``opti_sub_periods``"
msgstr ""

#: ../../api/api_reference.rst:523
msgid "仅对无监督优化有效。且仅当优化类型为\"multiple\"时有效。将优化区间切分为子区间的数量"
msgstr ""

#: ../../api/api_reference.rst:524
msgid "``opti_sub_prd_length``"
msgstr ""

#: ../../api/api_reference.rst:526
msgid "``0.6``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "仅当优化类型为\"multiple\"时有效。每一个优化子区间长度占整个优化区间长度的比例"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "例如，当优化区间长度为10年时，本参数为0.6代表每一个优化子区间长度为6年"
msgstr ""

#: ../../api/api_reference.rst:529
msgid "``test_start``"
msgstr ""

#: ../../api/api_reference.rst:531
msgid "``20200106``"
msgstr ""

#: ../../api/api_reference.rst:532
msgid "优化模式下的策略测试区间开始日期格式为\"YYYYMMDD\"字符串类型输入"
msgstr ""

#: ../../api/api_reference.rst:533
msgid "``test_end``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "优化模式下的策略测试区间结束日期"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "格式为\"YYYYMMDD\"字符串类型输入"
msgstr ""

#: ../../api/api_reference.rst:538
msgid "``test_cash_amounts``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "优化模式策略测试投资的金额，一个tuple或list，每次投入资金的金额。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "模拟现金多次定投投入时，输入多个数字表示多次投入"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "输入的数字的个数必须与cash_dates中的日期数量相同"
msgstr ""

#: ../../api/api_reference.rst:544
msgid "``test_cash_dates``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "invest_start参数|"
msgstr ""

#: ../../api/api_reference.rst:554
msgid "``test_type``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "测试类型。指测试数据的利用方式:"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"single\"     - 在每一回合的优化测试中，在测试区间上进行覆盖整个区间的单次回测"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "并评价回测结果"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"multiple\"   - 在每一回合的优化测试中，将测试区间的数据划分为多个子区间，在这"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "些子区间上分别测试，并根据所有测试的结果确定策略在整个区间上的"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "评价结果"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"montecarlo\" - 蒙特卡洛测试，根据测试区间历史数据的统计性质，随机生成大量的模"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "拟价格变化数据，用这些数据对策略的表现进行评价，最后给出统计意"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "义的评价结果"
msgstr ""

#: ../../api/api_reference.rst:566
msgid "``test_indicators``"
msgstr ""

#: ../../api/api_reference.rst:568
msgid "``years,fv,return,mdd,v,ref,alpha,beta,sharp,info``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "对优化后的策略参数进行测试评价的评价指标。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "格式为逗号分隔的字符串，多个评价指标会以字典的形式输出，包含以下类型中的一种或多种"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"years\"       - total year"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"fv\"          - final values"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"return\"      - total return rate"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"mdd\"         - max draw down"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"ref\"         - reference data return"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"alpha\"       - alpha rate"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"beta\"        - beta rate"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"sharp\"       - sharp rate"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "\"info\"        - info rate"
msgstr ""

#: ../../api/api_reference.rst:580
msgid "``indicator_plot_type``"
msgstr ""

#: ../../api/api_reference.rst:582
msgid "``histo``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "优化或测试结果评价指标的可视化图表类型:"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "0  - errorbar 类型"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "1  - scatter 类型"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "2  - histo 类型"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "3  - violin 类型"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "4  - box 类型"
msgstr ""

#: ../../api/api_reference.rst:589
msgid "``test_sub_periods``"
msgstr ""

#: ../../api/api_reference.rst:591
msgid "``3``"
msgstr ""

#: ../../api/api_reference.rst:592
msgid "仅当测试类型为\"multiple\"时有效。将测试区间切分为子区间的数量"
msgstr ""

#: ../../api/api_reference.rst:593
msgid "``test_sub_prd_length``"
msgstr ""

#: ../../api/api_reference.rst:595
msgid "``0.75``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "仅当测试类型为\"multiple\"时有效。每一个测试子区间长度占整个测试区间长度的比例"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "例如，当测试区间长度为4年时，本参数0.75代表每个测试子区间长度为3年"
msgstr ""

#: ../../api/api_reference.rst:598
msgid "``test_cycle_count``"
msgstr ""

#: ../../api/api_reference.rst:600
msgid "``100``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "仅当测试类型为\"montecarlo\"时有效。生成的模拟测试数据的数量。"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "默认情况下生成100组模拟价格数据，并进行100次策略回测并评价其统计结果"
msgstr ""

#: ../../api/api_reference.rst:603
msgid "``optimize_target``"
msgstr ""

#: ../../api/api_reference.rst:605
msgid "``final_value``"
msgstr ""

#: ../../api/api_reference.rst:606
msgid "策略的优化目标。即优化时以找到该指标最佳的策略为目标"
msgstr ""

#: ../../api/api_reference.rst:607
msgid "``maximize_target``"
msgstr ""

#: ../../api/api_reference.rst:610
msgid "为True时寻找目标值最大的策略，为False时寻找目标值最低的策略"
msgstr ""

#: ../../api/api_reference.rst:611
msgid "``opti_method``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "策略优化算法，可选值如下:"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "0 - 网格法，按照一定间隔对整个向量空间进行网格搜索"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "1 - 蒙特卡洛法，在向量空间中随机取出一定的点搜索最佳策略"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "2 - 递进步长法，对向量空间进行多轮搜索，每一轮搜索结束后根据结果选择部分子"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "空间，缩小步长进一步搜索"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "3 - 遗传算法，模拟生物种群在环境压力下不断进化的方法寻找全局最优（尚未完成）"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "4 - ML方法，基于机器学习的最佳策略搜索算法（尚未完成）"
msgstr ""

#: ../../api/api_reference.rst:621
msgid "``opti_grid_size``"
msgstr ""

#: ../../api/api_reference.rst:624
msgid "使用穷举法搜索最佳策略时有用，搜索步长"
msgstr ""

#: ../../api/api_reference.rst:625
msgid "``| opti_sample_count``"
msgstr ""

#: ../../api/api_reference.rst:627
msgid "``256``"
msgstr ""

#: ../../api/api_reference.rst:628
msgid "使用蒙特卡洛法搜索最佳策略时有用，在向量空间中采样的数量"
msgstr ""

#: ../../api/api_reference.rst:629
msgid "``opti_r_sample_count``"
msgstr ""

#: ../../api/api_reference.rst:632
msgid "在使用递进步长法搜索最佳策略时有用，每一轮随机取样的数量"
msgstr ""

#: ../../api/api_reference.rst:633
msgid "``opti_reduce_ratio``"
msgstr ""

#: ../../api/api_reference.rst:635
msgid "``0.1``"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "在使用递进步长法搜索最佳策略时有用，"
msgstr ""

#: ../../api/api_reference.rst:0
msgid "每一轮随机取样后择优留用的比例，同样也是子空间缩小的比例"
msgstr ""

#: ../../api/api_reference.rst:638
msgid "``opti_max_rounds``"
msgstr ""

#: ../../api/api_reference.rst:641
msgid "在使用递进步长法搜索最佳策略时有用，多轮搜索的最大轮数，轮数大于该值时停止搜索"
msgstr ""

#: ../../api/api_reference.rst:642
msgid "``opti_min_volume``"
msgstr ""

#: ../../api/api_reference.rst:644
msgid "``1000``"
msgstr ""

#: ../../api/api_reference.rst:645
msgid "在使用递进步长法搜索最佳策略时有用，空间最小体积，当空间volume低于该值时停止搜索"
msgstr ""

#: ../../api/api_reference.rst:646
msgid "``opti_population``"
msgstr ""

#: ../../api/api_reference.rst:648
msgid "``1000.0``"
msgstr ""

#: ../../api/api_reference.rst:649
msgid "在使用遗传算法搜索最佳策略时有用，种群的数量"
msgstr ""

#: ../../api/api_reference.rst:650
msgid "``opti_output_count``"
msgstr ""

#: ../../api/api_reference.rst:652
msgid "``30``"
msgstr ""

#: ../../api/api_reference.rst:653
msgid "策略参数优化后输出的最优参数数量"
msgstr ""

#: ../../api/built_in_strategies.rst:2
msgid "内置交易策略"
msgstr ""

#: ../../api/built_in_strategies.rst:4
msgid "qteasy提供超过70种内置交易策略，所有的交易策略都可以直接使用，通过修改这些交易策略的参数，可以很容易地实现不同的个性化效果。"
msgstr ""

#: ../../api/built_in_strategies.rst:6
msgid "qteasy所有的内置交易策略都有完整的说明文档，提供了交易策略的详细说明，参数说明，以及默认参数值。每一个qteasy内置交易策略都有一个ID，通过这个唯一的ID 用户可以容易地获取这个交易策略，查看说明文档，或者直接在创建Operator对象时使用这个交易策略。"
msgstr ""

#: ../../api/built_in_strategies.rst:10
msgid "获取内置交易策略"
msgstr ""

#: ../../api/built_in_strategies.rst:12
msgid "查看所有的内置交易策略，或者根据ID筛选部分交易策略。使用下面的函数："
msgstr ""

#: ../../api/built_in_strategies.rst:14
msgid "下面的函数接受相同的参数stg_id，但是返回不同类型的数据，如果stg_id为None，则返回所有的内置交易策略，否则返回指定ID的交易策略。 如果用户输入的stg_id不存在，qteasy会根据用户输入的stg_id返回id与其最接近的交易策略。"
msgstr ""

#: ../../api/built_in_strategies.rst:17
msgid "下面的函数返回一个字典，字典的key是交易策略的ID，value是交易策略的说明文档。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_ins:1
msgid "获取或筛选内置的交易策略,可以通过stg_id进行模糊匹配，返回的是策略的字典"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_list:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_strategies:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_ins:3
msgid "策略ID或者ID的片段，用于筛选需要的策略, 如果stg_id为None，则返回所有内置策略的字典 支持模糊匹配，例如'cross'可以匹配到'crossline'"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_ins:7
msgid "**strategies** -- 所有被筛选的内置策略的字典"
msgstr ""

#: ../../api/built_in_strategies.rst:21
msgid "下面的函数返回一个列表，列表的元素是交易策略的ID或者交易策略的名称。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_list:1
msgid "获取内置交易策略ID的列表,可以通过stg_id进行模糊匹配"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_list:7
msgid "**stg_ids** -- 所有符合筛选条件的内置策略的ID列表"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_strategies:1
msgid "获取内置交易策略对象的列表,可以通过stg_id进行模糊匹配"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_strategies:7
msgid "**strategies** -- 所有被筛选的内置策略对象的列表"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_strategies:28
msgid ":obj:`built_in_list`"
msgstr ""

#: ../../api/built_in_strategies.rst:27
msgid "如果要获取一个内置交易策略对象，需要使用下面的函数，根据用户输入的ID返回内置策略对象， 如果用户输入ID有误，函数会报错并给用户提供一个建议的ID："
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:1
msgid "使用ID获取交易策略"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_doc:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:3
msgid "策略ID"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:6
msgid "**stg**"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:9
msgid "如果id不是字符串类型:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.get_built_in_strategy:10
msgid "如果id不是内置策略ID:"
msgstr ""

#: ../../api/built_in_strategies.rst:32
msgid "如果要查看内置交易策略的说明文档，需要使用下面的函数，根据用户输入的ID返回内置策略对象， 如果用户输入ID有误，函数会报错并给用户提供一个建议的ID："
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_doc:1
msgid "获取内置策略的文档，stg_id必须正确给出且存在"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.built_in_doc:6
msgid "**doc_string** -- 返回策略的文档字符串，特殊字符已经被过滤掉"
msgstr ""

#: ../../api/built_in_strategies.rst:38
msgid "所有内置交易策略"
msgstr ""

#: ../../api/built_in_strategies.rst:40
msgid "下面是所有的内置交易策略的说明文档，用户可以根据自己的需求选择合适的交易策略。"
msgstr ""

#: ../../api/built_in_strategies.rst:43
msgid "不依赖其他技术分析包的交易策略"
msgstr ""

#: ../../api/built_in_strategies.rst:45
msgid "以下是一些不依赖其他技术分析包的交易策略，这些交易策略都是基于历史数据的简单计算，不需要其他技术分析包的支持，可以直接调用。"
msgstr ""

#: ../../api/built_in_strategies.rst:48
msgid "简单选股策略"
msgstr ""

#: ../../api/built_in_strategies.rst:50
msgid "根据历史数据选股"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:2
msgid "以股票过去一段时间内的财务指标的平均值作为选股因子选股"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:2
msgid "基础选股策略。以股票的历史指标的平均值作为选股因子，因子排序参数可以作为策略参数传入 改变策略数据类型，根据不同的历史数据选股，选股参数可以通过pars传入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:36
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:3
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:8
msgid "策略参数:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:5
msgid "``sort_ascending``: ``enum``, 是否升序排列因子"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:33
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:33
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:33
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:32
msgid "``True``: 优先选择因子最小的股票,"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:35
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:35
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:34
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:35
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:34
msgid "``False``, 优先选择因子最大的股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:11
msgid "``weighting``: ``enum``, 股票仓位分配比例权重"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:13
msgid "``even``       :默认值, 所有被选中的股票都获得同样的权重"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:41
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:41
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:40
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:41
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:40
msgid "``linear``     :权重根据因子排序线性分配"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:43
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:43
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:42
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:43
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:42
msgid "``distance``   :股票的权重与他们的指标与最低之间的差值（距离）成比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:45
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:45
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:44
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:45
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:44
msgid "``proportion`` :权重与股票的因子分值成正比"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:21
msgid "``condition``: enum, 股票筛选条件"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:16
msgid "``any``        :默认值，选择所有可用股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:18
msgid "``greater``    :筛选出因子大于``ubound``的股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:20
msgid "``less``       :筛选出因子小于``lbound``的股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:22
msgid "``between``    :筛选出因子介于``lbound``与``ubound``之间的股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:24
msgid "``not_between``:筛选出因子不在``lbound``与``ubound``之间的股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:33
msgid "``lbound``: ``float``, 股票筛选下限值, 默认值``np.-inf``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:35
msgid "``ubound``: ``float``, 股票筛选上限值, 默认值``np.inf``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:37
msgid "``max_sel_count``: ``float``, 抽取的股票的数量(p>=1)或比例(p<1), 默认值: 0.5，表示选中50%的股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:38
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:10
msgid "信号类型:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:39
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:6
msgid "PT型: 百分比持仓比例信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:40
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:44
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:44
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:43
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:44
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:43
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:16
msgid "信号规则:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:41
msgid "使用data_types指定一种数据类型，将股票过去的datatypes数据取平均值，将该平均值作为选股因子进行选股"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:33
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:33
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:61
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:54
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:54
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:54
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:54
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:53
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:26
msgid "策略属性缺省值:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:43
msgid "默认参数: ``(True, 'even', 'greater', 0, 0, 0.25)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:45
msgid "数据类型: ``eps`` 每股收益，单数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:47
msgid "采样频率: ``Y``, 年"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:49
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:16
msgid "窗口长度: ``270``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:51
msgid "参数范围: ``[(True, False)``,"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:53
msgid "``('even', 'linear', 'proportion')``,"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:55
msgid "``('any', 'greater', 'less', 'between', 'not_between')``,"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:57
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:59
msgid "``(-np.inf, np.inf)``,"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:61
msgid "``(0, 1.)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:35
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:35
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:34
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:34
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAvgIndicator:63
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:56
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:56
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:56
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:56
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:55
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:28
msgid "策略不支持参考数据，不支持交易数据"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:1
msgid "以股票N天前的价格或数据指标作为选股因子选股基础选股策略，以股票的N日前历史数据作为选股因子，因子排序参数以策略属性的形式控制"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:4
msgid "``n``: int, 股票历史数据的前置期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:8
msgid "在每个选股周期使用N日前的历史数据作为选股因子进行选股"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:10
msgid "通过以下策略属性控制选股方法:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:12
msgid "``max_sel_count``:     ``float``,  选股限额，表示最多选出的股票的数量，默认值: ``0.5``，表示选中50%的股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:14
msgid "``condition``:         ``str`` ,   确定股票的筛选条件，默认值``any``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:26
msgid "``lbound``:            ``float``,  执行条件筛选时的指标下界, 默认值``np.-inf``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:28
msgid "``ubound``:            ``float``,  执行条件筛选时的指标上界, 默认值``np.inf``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:30
msgid "``sort_ascending``:    ``bool``,   排序方法，默认值: ``False``,"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:37
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:37
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:36
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:37
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:36
msgid "``weighting``:         ``str`` ,   确定如何分配选中股票的权重，默认值: ``even``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:39
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:39
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:38
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:39
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:38
msgid "``even``       :所有被选中的股票都获得同样的权重"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:46
msgid "默认参数: ``(2,)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:49
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:48
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:49
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:12
msgid "数据类型: ``close`` 收盘价，单数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:51
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:51
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:50
msgid "采样频率: 月"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:31
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:52
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:25
msgid "窗口长度: ``100``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayLast:54
msgid "参数范围: ``[(2, 100)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:1
msgid "以股票过去N天的价格或数据指标的平均值作为选股因子选股 基础选股策略: 以股票的前N日历史数据平均值作为选股因子，因子排序参数以策略属性的形式控制"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:5
msgid "n: int, 股票历史数据的选择期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:47
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:47
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:46
msgid "默认参数: ``(14,)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:53
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:53
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:52
msgid "窗口长度: ``150``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayAvg:55
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:55
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:54
msgid "参数范围: ``[(2, 150)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:1
msgid "以股票过去N天的价格或数据指标的变动值作为选股因子选股 基础选股策略: 根据股票以前n天的股价或数据变动幅度作为选股因子进行选股"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:9
msgid "在每个选股周期使用过去N日内价格的变动值作为选股因子进行选股"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:47
msgid "默认参数: (14,)"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:49
msgid "数据类型: close 收盘价，单数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:53
msgid "窗口长度: 150"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayChange:55
msgid "参数范围: [(2, 150)]"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:1
msgid "以股票过去N天的价格或数据指标的变动比例作为选股因子选股 基础选股策略: 根据股票以前n天的股价变动比例作为选股因子"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:4
msgid "``n``: ``int``, 股票历史数据的选择期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:9
msgid "在每个选股周期使用过去N日内价格变动率作为选股因子进行选股"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayRateChange:51
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:50
msgid "采样频率: ``M``, 月"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:1
msgid "根据股票以前N天的股价波动率作为选股因子"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:8
msgid "在每个选股周期使用过去N日内的价格波动率作为选股因子进行选股"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNDayVolatility:48
msgid "数据类型: ``high,low,close`` 最高价，最低价，收盘价，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:2
msgid "空交易信号策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:2
msgid "不生成任何交易信号的策略"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:5
msgid "none"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:11
msgid "PS型: 百分比买卖交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:11
msgid "VS型: 买卖交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:13
msgid "整个信号周期内不产生任何交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:10
msgid "默认参数: ``()``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:30
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:23
msgid "采样频率: 天"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:28
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SignalNone:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:18
msgid "参数范围: ``[]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:3
msgid "变化率卖出信号策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:2
msgid "当价格的变化率超过阈值时，产生卖出信号。 本策略不产生买入信号。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:6
msgid "``day``, ``int``, 涨跌幅计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:8
msgid "``change``, ``float``，涨跌幅阈值"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:12
msgid "在下面情况下产生卖出信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:14
msgid "1，当``change`` > 0，且``day``日涨幅大于``change``时，产生-1卖出信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:16
msgid "2，当``change`` < 0，且``day``日跌幅大于``change``时，产生-1卖出信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:18
msgid "默认参数: ``(20, 0.1)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SellRate:26
msgid "参数范围: ``[(1, 100), (-0.5, 0.5)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:3
msgid "变化率买入信号策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:2
msgid "当价格的变化率超过阈值时，产生买入信号。 本策略不产生卖出信号。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:12
msgid "在下面情况下产生买入信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:14
msgid "1，当change > 0，且day日涨幅大于change时，产生1买入信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BuyRate:16
msgid "2，当change < 0，且day日跌幅大于change时，产生1买入信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:1
msgid "基础选股策略: 保持历史股票池中的所有股票都被选中，投资比例平均分配"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingAll:8
msgid "整个信号周期内持仓比例恒定，且所有投资组合的持仓比例相同"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:1
msgid "基础选股策略: 保持历史股票池中的所有股票都不被选中，投资仓位为0"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingNone:8
msgid "整个信号周期内持仓比例恒定，且所有投资组合的持仓比例都为0"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:2
msgid "基础选股策略: 在每个历史分段中，按照指定的比例（p<1时）随机抽取若干股票，"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:2
msgid "或随机抽取指定数量（p>=1）的股票进入投资组合，投资比例平均分配"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:5
msgid "``p``: ``float``, 抽取的股票的数量(p>=1)或比例(p<1)"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:9
msgid "当p>=1时，从所有股票池中随机抽取p支股票，并设定所有被选中股票的持仓比例都为1/p"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:11
msgid "当0>p>1时，从股票池中以p为比例抽取若干股票，并设定所有股票的持仓比例都相同且和为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:13
msgid "默认参数: ``(0.5, )``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SelectingRandom:21
msgid "参数范围: ``[(0, np.inf)]``"
msgstr ""

#: ../../api/built_in_strategies.rst:77
msgid "简单择时策略"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:1
msgid "简单择时策略，整个历史周期上固定保持多头全仓状态"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:4
msgid "无策略参数"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingLong:8
msgid "整个信号周期内持仓比例恒定为100%满仓"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:1
msgid "简单择时策略，整个历史周期上固定保持空头全仓状态"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingShort:8
msgid "整个信号周期内持仓比例恒定为-100%空头全仓"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:1
msgid "简单择时策略，整个历史周期上固定保持空仓状态"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TimingZero:8
msgid "整个信号周期内持仓比例恒定为0%空仓"
msgstr ""

#: ../../api/built_in_strategies.rst:86
msgid "基于均线指标的择时策略"
msgstr ""

#: ../../api/built_in_strategies.rst:88
msgid "下面的选股策略都基于股价均线指标来判定买入卖出"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:1
msgid "DMA择时策略"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:4
msgid "``s``, ``int``, 短均线周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:6
msgid "``l``, ``int``, 长均线周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:8
msgid "``d``, ``int``, DMA周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:14
msgid "1， DMA在AMA上方时，多头区间，即DMA线自下而上穿越AMA线后，输出为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:16
msgid "2， DMA在AMA下方时，空头区间，即DMA线自上而下穿越AMA线后，输出为0 3， DMA与股价发生背离时的交叉信号，可信度较高"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:17
msgid "默认参数: ``(12, 26, 9)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DMA:27
msgid "参数范围: ``[(10, 250), (10, 250), (8, 250)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:1
msgid "MACD择时策略类，运用MACD均线策略，生成目标仓位百分比"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:4
msgid "``s``: ``int``, 短周期指数平滑均线计算日期；"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:6
msgid "``l``: ``int``, 长周期指数平滑均线计算日期；"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:8
msgid "``m``: ``int``, MACD中间值DEA的计算周期；"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:10
msgid "PT型: 目标仓位百分比"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:12
msgid "计算``MACD``值: 1，当``MACD``值大于0时，设置仓位目标为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:15
msgid "2，当``MACD``值小于0时，设置仓位目标为0"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACD:25
msgid "参数范围: ``[(10, 250), (10, 250), (5, 250)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:1
msgid "TRIX择时策略，使用股票价格的三重平滑指数移动平均价格进行多空判断"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:4
msgid "``s``: int, 均线参数，单位为日，用于计算周期为S的三重平滑指数移动平均线TRIX"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:6
msgid "``m``: int, 平滑均线参数，用于计算TRIX的M日简单移动平均线"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:8
msgid "PT型: 目标仓位百分比``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:10
msgid "计算价格的三重平滑指数移动平均价TRIX，再计算M日TRIX的移动平均:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:12
msgid "1， ``TRIX``位于``MATRIX``上方时，设置仓位目标为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:14
msgid "2， ``TRIX``位于``MATRIX``下方时，设置仓位目标位-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:16
msgid "默认参数: ``(12, 12)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRIX:24
msgid "参数范围: ``[(2, 50), (3, 150)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:1
msgid "crossline择时策略类，利用长短均线的交叉确定多空状态"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:4
msgid "``s``: ``int``, 短均线计算日期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:6
msgid "``l``: ``int``, 长均线计算日期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:8
msgid "``m``: ``float``, 均线边界宽度（百分比）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:12
msgid "1, 当短均线位于长均线上方，且距离大于l*m%时，设置仓位目标为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:14
msgid "2, 当短均线位于长均线下方，且距离大于l*m%时，设置仓位目标为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:16
msgid "3, 当长短均线之间的距离不大于l*m%时，设置仓位目标为0"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:18
msgid "默认参数: ``(35, 120, 0.02)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:22
msgid "采样频率: ``D``, 天"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CROSSLINE:26
msgid "参数范围: ``[(10, 250), (10, 250), (0, 1)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:1
msgid "CDL择时策略，在K线图中找到符合要求的cdldoji模式"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:4
msgid "无"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:6
msgid "PS型: 百分比交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:8
msgid "VS型: 交易数量信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:10
msgid "搜索历史数据窗口内出现的cdldoji模式（匹配度0～100之间），加总后/100，计算"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:12
msgid "等效cdldoji匹配数量，以匹配数量为交易信号。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:16
msgid "数据类型: ``open, high, low, close`` 开盘，最高，最低，收盘价"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CDL:22
msgid "参数范围: ``None``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:1
msgid "布林带线渐进交易策略，根据股价与布林带上轨和布林带下轨之间的关系确定多空，"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:3
msgid "交易信号不是一次性产生的，而是逐步渐进买入和卖出。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:6
msgid "``p``: int, 均线周期，用于计算布林带线的均线周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:8
msgid "``u``: float，上轨偏移量，单位为标准差的倍数，如2表示上偏移2倍标准差"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:10
msgid "``d``: float，下轨偏移量，单位为标准差的倍数，如2表示下偏移2倍标准差"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:12
msgid "``m``: int，移动均线类型，取值范围0~8，表示9种不同的均线类型:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:14
msgid "PS型: 百分比例交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:16
msgid "计算BBAND，检查价格是否超过BBAND的上轨或下轨:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:18
msgid "1，当价格大于上轨后，每天产生10%的比例买入交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:20
msgid "2，当价格低于下轨后，每天产生33%的比例卖出交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:22
msgid "默认参数: ``(20, 2, 2, 0)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:24
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:32
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:28
msgid "窗口长度: ``200``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SoftBBand:30
msgid "参数范围: ``[(2, 100), (0.5, 5), (0.5, 5), (0, 8)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:1
msgid "布林带线交易策略，根据股价与布林带上轨和布林带下轨之间的关系确定多空， 在价格上穿或下穿布林带线上下轨时产生交易信号。 布林带线的均线类型不可选"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:6
msgid "``p``: ``int``, 均线周期，用于计算布林带线的均线周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:8
msgid "``u``: ``float``，上轨偏移量，单位为标准差的倍数，如2表示上偏移2倍标准差"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:10
msgid "``d``: ``float``，下轨偏移量，单位为标准差的倍数，如2表示下偏移2倍标准差"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:14
msgid "计算``BBAND``，检查价格是否超过``BBAND``的上轨或下轨:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:16
msgid "1，当价格上穿上轨时，产生全仓买入信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:18
msgid "2，当价格下穿下轨时，产生全仓卖出信号``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:20
msgid "默认参数: ``(20, 2, 2)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.BBand:28
msgid "参数范围: ``[(2, 100), (0.5, 5), (0.5, 5)]``"
msgstr ""

#: ../../api/built_in_strategies.rst:106
msgid "依赖``TA-Lib``技术分析包的交易策略"
msgstr ""

#: ../../api/built_in_strategies.rst:108
msgid "以下是一些依赖``TA-Lib``技术分析包的交易策略，这些交易策略都是基于``TA-Lib``技术分析包的计算，需要安装``TA-Lib``技术分析包。"
msgstr ""

#: ../../api/built_in_strategies.rst:112
msgid "基于单均线穿越的择时策略"
msgstr ""

#: ../../api/built_in_strategies.rst:114
msgid "下面的选股策略都基于股价是否上穿/下穿均线来判定买入卖出"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:1
msgid "单均线交叉策略——SMA均线(简单移动平均线): 根据股价与SMA均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:4
msgid "``rng``: ``int``, 均线的计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:12
msgid "PT型: 仓位百分比目标信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:8
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:8
msgid "检查当前价格与均线的关系:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:10
msgid "1，当价格高于均线时，设定持仓比例为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:14
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:12
msgid "2，当价格低于均线时，设定持仓比例为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSSMA:22
msgid "参数范围: ``[(3, 250)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSDEMA:1
msgid "单均线交叉策略——DEMA均线(双重指数平滑移动平均线): 根据股价与DEMA均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSEMA:1
msgid "单均线交叉策略——EMA均线(指数平滑移动均线): 根据股价与EMA均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:1
msgid "单均线交叉策略——HT(希尔伯特变换瞬时趋势线): 根据股价与HT线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:4
msgid "不需要参数"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:10
msgid "1，当价格高于HT线时，设定持仓比例为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSHT:12
msgid "2，当价格低于HT线时，设定持仓比例为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSKAMA:1
msgid "单均线交叉策略——KAMA均线(考夫曼自适应移动均线): 根据股价与KAMA均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:1
msgid "单均线交叉策略——MAMA均线(MESA自适应移动平均线): 根据股价与MAMA均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:4
msgid "``f``: ``float`` between 0 and 1, 快速移动极限"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:34
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:24
msgid "``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:6
msgid "``s``: ``float`` between 0 and 1, 慢速移动极限"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:16
msgid "默认参数: ``(0.5, 0.05)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSMAMA:24
msgid "参数范围: ``[(0.01, 0.99), (0.01, 0.99)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:1
msgid "单均线交叉策略——T3均线(三重指数平滑移动平均线): 根据股价与T3均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:4
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:7
msgid "``p``: ``int`` 均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:9
msgid "``v``: ``float`` v因子，调整因子，取值范围0～1之间"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:16
msgid "默认参数: ``(12, 0.5)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRST3:24
msgid "参数范围: ``[(2, 20), (0, 1)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:1
msgid "单均线交叉策略——TEMA均线(三重指数平滑移动平均线): 根据股价与TEMA均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:14
msgid "默认参数: ``(6,)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTEMA:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:27
msgid "参数范围: ``[(2, 20)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:1
msgid "单均线交叉策略——TRIMA均线(三重指数平滑移动平均线): 根据股价与TRIMA均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSTRIMA:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:22
msgid "参数范围: ``[(3, 200)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SCRSWMA:1
msgid "单均线交叉策略——WMA均线(加权移动平均线): 根据股价与WMA均线的相对位置设定持仓比例"
msgstr ""

#: ../../api/built_in_strategies.rst:138
msgid "基于双均线穿越的择时策略"
msgstr ""

#: ../../api/built_in_strategies.rst:140
msgid "下面的选股策略都基于两根（一快一慢）均线是否交叉来判定买入卖出"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:1
msgid "双均线交叉策略——SMA均线(简单移动平均线): 基于SMA均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:5
msgid "``l``: ``int``, 长周期，慢速均线的计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:7
msgid "``s``: ``int``, 短周期，快速均线的计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:11
msgid "用长短两个周期分别计算慢快两根均线:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:13
msgid "1，当快均线高于慢均线时，设定持仓比例为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:15
msgid "2，当慢均线高于快均线时，设定持仓比例为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:17
msgid "默认参数: ``(125, 25)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSSMA:25
msgid "参数范围: ``[(3, 250), (3, 250)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSDEMA:1
msgid "双均线交叉策略——DEMA均线(简单移动平均线): 基于DEMA均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSEMA:1
msgid "双均线交叉策略——EMA均线(指数平滑移动平均线): 基于EMA均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:1
msgid "双均线交叉策略——KAMA均线(考夫曼自适应移动平均线): 基于KAMA均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:16
msgid "策略属性缺省值: 默认参数: ``(125, 25)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSKAMA:25
msgid "参数范围: ``[(3, 250), (3, 250)]`` 策略不支持参考数据，不支持交易数据"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:1
msgid "双均线交叉策略——MAMA均线(MESA自适应移动平均线): 基于MAMA均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:5
msgid "``lf``: ``float``, 长周期快速移动极限，慢速均线的KAMA计算参数"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:7
msgid "``ls``: ``float``, 长周期慢速移动极限，慢速均线的KAMA计算参数"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:9
msgid "``sf``: ``float``, 短周期快速移动极限，快速均线的KAMA计算参数"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:11
msgid "``ss``: ``float``, 短周期慢速移动极限，快速均线的KAMA计算参数"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:21
msgid "默认参数: ``(0.15, 0.05, 0.55, 0.25)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSMAMA:29
msgid "参数范围: ``[(0.01, 0.99), (0.01, 0.99), (0.01, 0.99), (0.01, 0.99)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:1
msgid "双均线交叉策略——T3均线(三重指数平滑移动平均线): 基于T3均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:5
msgid "``lp``: ``int`` 长周期参数，用于计算慢均线"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:7
msgid "``lv``: ``float`` 长周期v因子，调整因子，取值范围0～1之间，用于计算慢均线"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:7
msgid "``sp``: ``int`` 短周期参数，用于计算快均线"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:11
msgid "``sv``: ``float`` 短周期v因子，调整因子，取值范围0～1之间，用于计算快均线"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:21
msgid "默认参数: ``(20, 0.5, 5, 0.5)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRST3:29
msgid "参数范围: ``[(2, 20), (0, 1), (2, 20), (0, 1)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:1
msgid "双均线交叉策略——TEMA均线(三重指数平滑移动平均线): 基于TEMA均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:17
msgid "默认参数: ``(11, 6)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTEMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:29
msgid "参数范围: ``[(2, 20), (2, 20)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:2
msgid "双均线交叉策略——TRIMA均线(三重指数平滑移动平均线):"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:2
msgid "基于TRIMA均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSTRIMA:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:25
msgid "参数范围: ``[(3, 200), (3, 200)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:2
msgid "双均线交叉策略——WMA均线(加权移动平均线):"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DCRSWMA:2
msgid "基于WMA均线计算规则生成快慢两根均线，根据快与慢两根均线的相对位置设定持仓比例"
msgstr ""

#: ../../api/built_in_strategies.rst:161
msgid "基于均线斜率的择时策略"
msgstr ""

#: ../../api/built_in_strategies.rst:163
#: ../../api/built_in_strategies.rst:190
msgid "下面的选股策略都基于均线的斜率来判定买入卖出"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:1
msgid "均线斜率交易策略——SMA均线(简单移动平均线): 基于SMA计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:7
msgid "``f``: ``int``, 均线的计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:10
msgid "``N``: ``int``, 估算斜率使用的数据点数量"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:14
msgid "按照规则计算价格的移动均线，并且计算均线的当前斜率``slope``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:16
msgid "``slope``使用最近的N个移动均线数据点通过线性回归得到:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:18
msgid "1，当``slope``斜率大于零时，判断趋势向上，设定持仓比例为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:20
msgid "2，当``slope``斜率小于零时，判断趋势向下，设定持仓比例为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:21
msgid "默认参数: ``(35, 5)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPSMA:29
msgid "参数范围: ``[(3, 250), (2, 20)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPDEMA:1
msgid "均线斜率交易策略——DEMA均线(双重指数平滑移动平均线): 基于DEMA计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:1
msgid "均线斜率交易策略——EMA均线(指数平滑移动平均线): 基于EMA计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPEMA:19
msgid "2，当``slope``斜率小于零时，判断趋势向下，设定持仓比例为-1``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:1
msgid "均线斜率交易策略——HT均线(希尔伯特变换——瞬时趋势线线): 基于HT计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPHT:19
msgid "默认参数: ``(5,)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:1
msgid "均线斜率交易策略——KAMA均线(考夫曼自适应移动平均线): 基于KAMA计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPKAMA:17
msgid "1，当``slope``斜率大于零时，判断趋势向上，设定持仓比``例为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:1
msgid "均线斜率交易策略——MAMA均线(MESA自适应移动平均线): 基于MAMA计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:7
msgid "``f``: ``float``, 高速移动极限值"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:9
msgid "``s``: ``float``, 低速移动极限值"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:23
msgid "默认参数: ``(0.5, 0.05, 5)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPMAMA:31
msgid "参数范围: ``[(0.01, 0.99), (0.01, 0.99), (2, 20)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:4
msgid "均线斜率交易策略——T3均线(三重指数平滑移动平均线):"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:2
msgid "基于T3计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:23
msgid "默认参数: ``(12, 0.25, 5)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPT3:31
msgid "参数范围: ``[(2, 20), (0, 1), (2, 20)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:1
msgid "均线斜率交易策略——TEMA均线(三重指数平滑移动平均线): 基于TEMA计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTEMA:21
msgid "默认参数: ``(6, 5)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:1
msgid "均线斜率交易策略——TRIMA均线(三重指数平滑移动平均线): 基于TRIMA计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:7
msgid "``f``: ``int`` 均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPTRIMA:29
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:30
msgid "参数范围: ``[(3, 200), (2, 20)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:1
msgid "均线斜率交易策略——WMA均线(加权移动平均线):"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:3
msgid "基于WMA计算规则生成移动均线，根据均线的斜率设定持仓比例目标 （当均线斜率为正时，表示价格趋势向上，提高持仓比例，当均线斜率为负时，表示趋势 向下，设定持仓比例为负一或零）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:8
msgid "``f``: ``int``, 均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SLPWMA:22
msgid "默认参数: ``(125, 5)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:1
msgid "扩展抛物线SAR策略，当指标大于0时发出买入信号，当指标小于0时发出卖出信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:4
msgid "``a``: ``int``, Parabolic SAR参数: 加速度"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:6
msgid "``m``: ``float``, maximum最大值"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:10
msgid "计算``Parabolic SAR``:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:12
msgid "1，当``Parabolic SAR``大于0时，输出多头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:14
msgid "2，当``Parabolic SAR``小于0时，输出空头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:16
msgid "默认参数: ``(0, 3)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:18
msgid "数据类型: ``high``, ``low``最高价和最低价，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.SAREXT:22
msgid "窗口长度: ``200`` 参数范围: ``[(-100, 100), (0, 5)]``"
msgstr ""

#: ../../api/built_in_strategies.rst:188
msgid "基于动量技术指标的择时策略"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:1
msgid "ADX指标（平均定向运动指数）选股策略: 基于ADX指标判断当前趋势的强度，从而根据趋势强度产生交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:5
msgid "``p``: ``int``, ADX计算时间周期，取值范围2～35"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:9
msgid "按照规则计算``ADX``趋势强度:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:11
msgid "1, 当``ADX>25``时，判断趋势向上，设定持仓比例为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:13
msgid "2, 当``20<ADX<25``之间时，判断为中性趋势，设定持仓比例为0"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:15
msgid "3, 当``ADX>20``时，判断趋势向下，设定持仓比例为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:27
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:25
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:21
msgid "数据类型: ``high``, ``low``, ``close`` 最高价，最低价，收盘价，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADX:25
msgid "参数范围: ``[(2, 35)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:1
msgid "APO指标（绝对价格震荡指标）选股策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:3
msgid "APO指标通过两条均线的相对关系生成， 基于APO指标判断当前股价变动的牛熊趋势，从而根据趋势产生交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:7
msgid "``f``: ``int``, 快速均线周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:9
msgid "``s``: ``int``, 慢速均线周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:11
msgid "``m``: ``int``, 移动均线类型，取值范围0～8"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:15
msgid "按照规则计算APO趋势:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:17
msgid "1, 当``APO``大于0时，判断为牛市趋势，设定持仓比例为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:19
msgid "2, 当``ADX``小于0时，判断为熊市趋势，设定持仓比例为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:22
msgid "默认参数: ``(12, 26, 0)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.APO:29
msgid "参数范围: ``[(10, 100), (10, 100), (0, 8)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:1
msgid "AROON指标选股策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:3
msgid "AROON指标被用于判断当前股价处于趋势区间还是僵持区间，通过计算AROON指标 策略可以根据趋势的强弱程度输出强多/空头和弱多/空头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:7
msgid "``p``: ``int``, 趋势判断周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:11
msgid "按照规则计算``AROON`` ``UP / DOWN``两条趋势线，并生成持仓比例信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:13
msgid "1, 当UP在DOWN的上方时，输出弱多头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:15
msgid "2, 当UP位于DOWN下方时，输出弱空头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:17
msgid "3, 当UP大于70且DOWN小于30时，输出强多头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:19
msgid "4, 当UP小于30且DOWN大于70时，输出强空头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AROON:23
msgid "数据类型: ``high``, ``low`` 最高价，最低价，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:1
msgid "CMO (Chande Momentum Oscillator 钱德动量振荡器) 选股策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:3
msgid "CMO 是一个在-100到100之间波动的动量指标，它被用来判断当前股价位于 超卖还是超买区间，本策略使用这个指标生成投资仓位目标"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:7
msgid "``p``: ``int``, 动量计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:11
msgid "按照规则计算``CMO``，并生成持仓比例信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:13
msgid "1, 当``CMO``大于0时，输出弱多头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:15
msgid "2, 当``CMO``小于0时，输出弱空头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:17
msgid "3, 当``CMO``大于50时，输出强多头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:19
msgid "4, 当``CMO``小于-50时，输出强空头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.CMO:23
msgid "数据类型: ``high``, ``low``, ``close`` 最高价，最低，收盘价，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:1
msgid "MACDEXT (Extendec MACD 扩展MACD指数) 选股策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:3
msgid "本策略使用MACD指标生成持仓目标，但是与标准的MACD不同，MACDEXT的快、慢、及信号均线的类型均可选"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:6
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:6
msgid "``fp``: ``int``, 快速均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:8
msgid "``ft``: ``int``, 快速均线类型，取值范围0～8"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:8
msgid "``sp``: ``int``, 慢速均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:12
msgid "``st``: ``int``, 慢速均线类型，取值范围0～8"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:14
msgid "``s``:  ``int``, MACD信号线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:16
msgid "``t``:  ``int``, MACD信号线类型，取值范围0～8"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:20
msgid "按照规则计算``MACD``，根据MACD的H线生成持仓比例信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:22
msgid "1, 当``hist>0``时输出多头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:24
msgid "2, 当``hist<0``时输出空头"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:26
msgid "默认参数: ``(12, 0, 26, 0, 9, 0)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MACDEXT:34
msgid "参数范围: ``[(2, 35), (0, 8), (2, 35), (0, 8), (2, 35), (0, 8)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:1
msgid "MFI (Money Flow Index 货币流向指数) 交易策略: MFI指数用于判断股价属于超买还是超卖状态，本策略使用MFI指标生成交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:5
msgid "``p``:  ``int``, MFI信号计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:9
msgid "按照规则计算``MFI``，根据MFI的值生成比例交易信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:11
msgid "1, 当``MFI>20``时，持续不断产生10%买入交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:13
msgid "2, 当``MFI>80``时，持续不断产生30%卖出交易信号，持续卖出持仓股票"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MFI:17
msgid "数据类型: ``high``, ``low``, ``close``, ``volume`` 最高价，最低，收盘，交易量，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:1
msgid "DI (Directory Indicator 方向指标) 交易策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:3
msgid "DI 指标包含负方向指标与正方向指标，它们分别表示价格上行和下行的趋势强度，本策略使用±DI指标生成交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:6
msgid "``n``:  ``int``, 负DI信号计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:8
msgid "``p``:  ``int``, 正DI信号计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:10
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:12
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:12
msgid "PT型: 百分比持仓目标信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:12
msgid "按照规则计算正负DI，根据DI的值生成持仓目标信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:14
msgid "1, 当``+DI > -DI``时，设置持仓目标为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:16
msgid "2, 当``+DI < -DI``时，设置持仓目标为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:18
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:21
msgid "默认参数: ``(14, 14)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:20
msgid "数据类型: ``high``, ``low``, ``close`` 最高价，最低，收盘，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DI:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:29
msgid "参数范围: ``[(1, 100), (1, 100)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:1
msgid "DM (Directional Movement 方向运动指标) 交易策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:3
msgid "DM 指标包含负方向运动指标(Negative Directional Movement)与正方向运动指标(Positive Directional Movement)， 它们分别表示价格上行和下行的趋势，本策略使用±DM指标生成交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:7
msgid "``n``:  ``int``, 负DM信号计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:9
msgid "``p``:  ``int``, 正DM信号计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:13
msgid "按照规则计算正负DM，根据DM的值生成持仓目标信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:15
msgid "1, 当``+DM > -D``M时，设置持仓目标为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:17
msgid "2, 当``+DM < -D``M时，设置持仓目标为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:15
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:20
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:20
msgid "3, 其余情况设置持仓目标为0"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.DM:23
msgid "数据类型: ``high``, ``low`` 最高价，最低，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:1
msgid "MOM (momentum indicator 动量指标) 交易策略: MOM 指标可以用于识别价格的上行或下行趋势的强度，当前价格高于N日前价格时，MOM为正，反之为负。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:5
msgid "``n``:  ``int``, MOM信号计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:9
msgid "按照规则计算``MOM``，根据``MOM``的值生成持仓目标信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:11
msgid "1, 当``MOM > 0``时，设置持仓目标为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:13
msgid "2, 当``MOM < 0``时，设置持仓目标为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:24
msgid "策略属性缺省值:``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:17
msgid "默认参数: ``(14, )``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.MOM:25
msgid "参数范围: ``[(1, 100)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:1
msgid "PPO (Percentage Price Oscillator 百分比价格振荡器) 交易策略: PPO 指标表示快慢两根移动均线之间的百分比差值，用于判断价格的变化趋势。长短均线的计算周期和 均线类型均为策略参数。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:10
msgid "``m``: ``int``, 移动均线类型（取值范围0～8）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:14
msgid "按照规则计算PPO，根据PPO的值生成持仓目标信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:16
msgid "1, 当PPO > 0时，设置持仓目标为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:18
msgid "2, 当PPO < 0时，设置持仓目标为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.PPO:30
msgid "参数范围: ``[(2, 100), (20, 200), (0, 8)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:1
msgid "RSI (Relative Strength Index 相对强度指数) 交易策略: RSI 指标度量最近价格变化的幅度，从而判断目前股票属于超卖还是超买状态，并据此判断变化趋势。RSI指标总是在0到100之间 震荡，是一条震荡曲线。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:6
msgid "``p``: ``int``, RSI计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:8
msgid "``ulim``: ``int``, 触发多头仓位的最低限"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:10
msgid "``llim``: ``int``, 触发空头仓位的最高限"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:14
msgid "按照规则计算RSI，根据RSI的值与ulim/llim的关系生成持仓目标信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:16
msgid "1, 当RSI > ulim时，设置持仓目标为1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:18
msgid "2, 当RSI < llim时，设置持仓目标为-1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:22
msgid "默认参数: ``(12, 70, 30)````"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.RSI:30
msgid "参数范围: ``[(2, 100), (50, 100), (0, 50)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:1
msgid "STOCH (Stochastic Indicator 随机指数) 交易策略: STOCH 指标度量价格变化的动量，并且动量的大小判断价格趋势，并生成比例买卖交易信号。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:5
msgid "``fk``: ``int``, 快速均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:7
msgid "``sk``: ``int``, 慢速K均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:9
msgid "``skm``: ``int``, 慢速K均线类型，取值范围0～8"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:11
msgid "``sd``: ``int``, 慢速D均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:13
msgid "``sdm``: ``int``, 慢速D均线类型，取值范围0～8"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:17
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:15
msgid "按照规则计算k值和d值，根据k值生成比例买卖交易信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:15
msgid "1, 当k > 80时，产生逐步卖出信号，每周期卖出持有份额的30%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:21
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:17
msgid "2, 当k < 20时，产生逐步买入信号，每周期买入总投资额的10%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:23
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:19
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:21
msgid "3, 当k和d发生背离的时候，也会产生信号（未来改进）"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:25
msgid "默认参数: ``(5, 3, 0, 3, 0)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCH:33
msgid "参数范围: ``[(2, 100), (2, 100), (0, 8), (2, 100), (0, 8)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:1
msgid "STOCHF (Stochastic Fast Indicator 快速随机指标) 交易策略: STOCHF 指标度量价格变化的动量，与STOCH策略类似，使用快速随机指标判断价格趋势，并生成比例买卖交易信号。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:5
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:7
msgid "``fk``: ``int``, 快速K均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:7
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:9
msgid "``fd``: ``int``, 快速D均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:9
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:11
msgid "``fdm``: ``int``, 快速D均线类型，取值范围0～8"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:21
msgid "默认参数: ``(5, 3, 0)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHF:29
msgid "参数范围: ``[(2, 100), (2, 100), (0, 8)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:1
msgid "STOCHRSI (Stochastic Relative Strength Index 随机相对强弱指标) 交易策略: STOCHRSI 指标度量价格变化的动量，该指标在0～1之间波动，表示相对的价格趋势强弱程度，并生成比例买卖交易信号。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:5
msgid "``p``: ``int``, 计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:17
msgid "1, 当k > 0.8时，产生逐步卖出信号，每周期卖出持有份额的30%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:19
msgid "2, 当k < 0.2时，产生逐步买入信号，每周期买入总投资额的10%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:23
msgid "默认参数: ``(14, 5, 3, 0)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.STOCHRSI:31
msgid "参数范围: ``[(2, 100), (2, 100), (2, 100), (0, 8)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:1
msgid "ULTOSC (Ultimate Oscillator Indicator 终极振荡器指标) 交易策略: ULTOSC 指标通过三个不同的时间跨度计算价格动量，并根据多种不同动量之间的偏离值生成交易信号。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:5
msgid "``p1``: ``int``, 动量计算周期 1"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:7
msgid "``p2``: ``int``, 动量计算周期 2"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:9
msgid "``p3``: ``int``, 动量计算周期 3"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:11
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:7
msgid "``u``:  ``int``, 卖出信号阈值"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:13
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:9
msgid "``l``:  ``int``, 买入信号阈值"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:17
msgid "计算``ULTOSC``指标，并根据指标的大小生成交易信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:19
msgid "1, 当``ULTOSC`` > u时，产生逐步卖出信号，每周期卖出持有份额的30%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:21
msgid "2, 当``ULTOSC ``< l时，产生逐步买入信号，每周期买入总投资额的10%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:23
msgid "默认参数: ``(7, 14, 28, 70, 30)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ULTOSC:31
msgid "参数范围: ``[(1, 100), (1, 100), (1, 100), (70, 99), (1, 30)]``"
msgstr ""

#: ../../api/built_in_strategies.rst:224
msgid "基于量价技术指标的择时策略"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:1
msgid "WILLR (William's %R 威廉姆斯百分比) 交易策略: WILLR 指标被用于计算股价当前处于超买还是超卖区间，并用于生成交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:5
msgid "``p``:  ``int``, 动量计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:13
msgid "计算``WILLR``指标，并根据指标的大小生成交易信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:15
msgid "1, 当``WILLR > -l``时，产生逐步卖出信号，每周期卖出持有份额的30%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:17
msgid "2, 当``WILLR < -u``时，产生逐步买入信号，每周期买入总投资额的10%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:19
msgid "默认参数: ``(14, 80, 20)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.WILLR:27
msgid "参数范围: ``[(2, 100), (70, 99), (1, 30)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:1
msgid "AD 交易策略: 本策略使用AD线 (Accumulate Distribution Line)来生成交易信号，它基于交易量和交易价格来判断 一只股票的资金累计流入或者流出的趋势，并通过此种趋势判断市场的上升/下降。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:10
msgid "计算 ``AD`` 指标，根据AD信号的变化情况（上升/持平/下降）生成交易信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:12
msgid "AD线的变化趋势通过比较今天/昨天两个AD值的大小来确定："
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:14
msgid "1, 当 ``AD(last) > AD(latest)`` 时，下降趋势，产生逐步卖出信号，每周期卖出持有份额的30%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:16
msgid "2, 当 ``AD(last) < AD(latest)`` 时，上升趋势，产生逐步买入信号，每周期买入总投资额的10%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:18
msgid "3, 当 ``AD(last) = AD(latest)`` 时，持平趋势，不产生任何交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.AD:22
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:22
msgid "数据类型: ``high``, ``low``, ``close``, ``volume`` 最高价，最低价，收盘价, 成交量，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:1
msgid "AD Oscillator 交易策略: 本策略使用ADOSC (Accumulate Distribution 振荡器)来生成交易信号，AD振荡器通过计算AD线的MACD 线判断股票价格的多空走向。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:6
msgid "``f``: int, 快均线周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:8
msgid "``s``: int, 慢均线周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:12
msgid "计算 ``ADOSC`` 指标，并根据指标的大小生成交易信号:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:14
msgid "1, 当 ``AD > 0`` 时，产生逐步卖出信号，每周期卖出持有份额的30%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:16
msgid "2, 当 ``AD < 0`` 时，产生逐步买入信号，每周期买入总投资额的10%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:18
msgid "3, 当 ``AD = 0`` 时，不产生任何交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:20
msgid "默认参数: ``(3, 10)``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ADOSC:28
msgid "参数范围: ``[(2, 10), (10, 99)]``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:1
msgid "OBV 交易策略: 本策略使用OBV(On-Board Values)来生成交易信号，它基于交易量和交易价格来确认股票的变化"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:4
msgid "趋势（通过均线判断趋势），当OBV信号确认价格上升趋势时，产生建仓信号，当OBV信号与价格趋势。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:7
msgid "n: int, OBV和收盘价的移动平均线计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:11
msgid "计算 ``OBV`` 指标，并计算OBV指标的N日（N为可调参数）移动平均线，同时计算收盘价的"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:13
msgid "N日移动均线，并根据移动均线昨日/今日的关系判断上升/下降趋势:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:16
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:15
msgid "当昨日均线高于今日时，判断为下降趋势，当昨日均线低于今日时，判断为上升趋势。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:17
msgid "策略再根据两条均线的上升/下降趋势的确认/背离产生买入/卖出信号："
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:19
msgid "1, 当 收盘价趋势上升，且OBV趋势上升时，上升趋势得到确认，买入100%份额"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:21
msgid "2, 当 收盘价趋势上升，但OBV趋势下降时，上升趋势背离，卖出持有股份的50%"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:23
msgid "3, 当 收盘价趋势下降，且OBV趋势下降时，下降趋势得到确认，卖出全部持有股份。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:26
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:25
msgid "默认参数: ``(15, )``"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:27
msgid "数据类型: ``close``, ``volume`` 收盘价, 成交量，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:34
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.OBV:33
msgid "参数范围: ``[(5, 100)]``"
msgstr ""

#: ../../api/built_in_strategies.rst:236
msgid "基于波动率技术指标的择时策略"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:1
msgid "ATR 交易策略:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:3
msgid "ATR交易策略使用ATR指标来生成交易信号，ATR指标度量股票价格的波动性，通过波动性来判断股票的"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:5
msgid "风险和波动性，从而生成交易信号。"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:8
msgid "n: int, ATR的计算周期"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:12
msgid "计算 ``ATR`` 指标，并计算价格的N日（N为可调参数）移动平均线和ATR指标，并"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:14
msgid "根据ATR以及移动均线昨日/今日的关系判断上升/下降趋势:"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:18
msgid "策略再根据ATR的值来判断上升下降趋势的确认与否："
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:20
msgid "1, 当 收盘价趋势上升，且ATR趋势上升时，上升趋势得到确认，买入100%份额"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:22
msgid "2, 当 收盘价趋势下降，且ATR趋势下降时，下降趋势得到确认，卖出全部持有股份"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:24
msgid "3, 当出现其他情况时，不产生任何交易信号"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.ATR:28
msgid "数据类型: ``high``, ``low``, ``close``, 最高价，最低价，收盘价，多数据输入"
msgstr ""

#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.NATR:1
#: ../../../../qteasy/built_in.py:docstring of qteasy.built_in.TRANGE:1
msgid "Not Implemented Yet"
msgstr ""

#: ../../api/data_source.rst:2
msgid "历史数据的存储——DataSource对象"
msgstr ""

#: ../../../../qteasy/database.py:docstring of qteasy.database.DataSource:1
msgid "DataSource 对象管理存储在本地的历史数据文件或数据库."
msgstr ""

#: ../../../../qteasy/database.py:docstring of qteasy.database.DataSource:3
msgid "通过DataSource对象，History模块可以容易地从本地存储的数据中读取并组装所需要的历史数据 并确保历史数据符合HistoryPanel的要求。 所有的历史数据必须首先从网络数据提供商处下载下来并存储在本地文件或数据库中，DataSource 对象会检查数据的格式，确保格式正确并删除重复的数据。 下载下来的历史数据可以存储成不同的格式，但是不管任何存储格式，所有数据表的结构都是一样 的，而且都是与Pandas的DataFrame兼容的数据表格式。目前兼容的文件存储格式包括csv, hdf, fth(feather)，兼容的数据库包括mysql和MariaDB。 如果HistoryPanel所要求的数据未存放在本地，DataSource对象不会主动下载缺失的数据，仅会 返回空DataFrame。 DataSource对象可以按要求定期刷新或从Provider拉取数据，也可以手动操作"
msgstr ""

#: ../../../../qteasy/database.py:docstring of qteasy.database.DataSource:16
msgid "以表格形式列出所有数据表的当前数据状态"
msgstr ""

#: ../../api/data_types.rst:2
msgid "管理历史数据的类型——DataType对象"
msgstr ""

#: ../../api/history_data.rst:2
msgid "历史数据获取和管理"
msgstr ""

#: ../../api/history_data.rst:4
#: ../../api/history_data_types.rst:4
msgid "使用qteasy可以获取并管理大量的历史数据。qteasy可以管理的历史数据涵盖股票、基金、指数、期货等等，种类包含价格数据、技术指标、宏观经济、公司财报、宏观金融等等。"
msgstr ""

#: ../../api/history_data.rst:6
#: ../../api/history_data_types.rst:6
msgid "所有数据都可以通过tushare的接口获取，下载到本地之后，就可以通过qteasy的接口进行管理和调用了。"
msgstr ""

#: ../../api/history_data.rst:9
msgid "查找支持历史数据"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:1
msgid "根据输入的字符串，查找或匹配历史数据类型,并且显示该历史数据的详细信息。支持模糊查找、支持通配符、支持通过英文字符或中文 查找匹配的历史数据类型。"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:4
msgid "一个字符串，用于查找或匹配历史数据类型"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:6
msgid "是否模糊匹配数据描述，如果给出的字符串中含有非Ascii字符，会自动转为True  - False: 仅匹配数据名称  - True:  同时匹配数据描述"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:8
msgid "是否模糊匹配数据描述，如果给出的字符串中含有非Ascii字符，会自动转为True"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:8
msgid "False: 仅匹配数据名称"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:9
msgid "True:  同时匹配数据描述"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:11
msgid "是否模糊匹配数据名称，如果给出的字符串中含有非Ascii字符或通配符*/?，会自动转为True  - False: 精确匹配数据名称  - True:  模糊匹配数据名称或数据描述"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:13
msgid "是否模糊匹配数据名称，如果给出的字符串中含有非Ascii字符或通配符*/?，会自动转为True"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:13
msgid "False: 精确匹配数据名称"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:14
msgid "True:  模糊匹配数据名称或数据描述"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:16
msgid "数据频率，如果提供，则只匹配该频率的数据 可以输入单个频率，也可以输入逗号分隔的多个频率"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:19
msgid "证券类型，如果提供，则只匹配该证券类型的数据 可以输入单个证券类型，也可以输入逗号分隔的多个证券类型"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:22
msgid "匹配度阈值，匹配度超过该阈值的项目会被判断为匹配"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:25
msgid "**data_id** -- 匹配到的数据类型的data_id，可以用于qt.get_history_data()下载数据"
msgstr ""

#: ../../../../qteasy/datatypes.py:docstring of qteasy.datatypes.find_history_data:72
msgid "输入的s不是字符串，或者freq/asset_type不是字符串或列表:"
msgstr ""

#: ../../api/history_data.rst:14
#: ../../api/history_data_types.rst:12
msgid "下载历史数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:1
msgid "从网络数据提供商的API通道批量下载数据，清洗后填充数据到本地数据源中"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:3
msgid "数据表名，必须是database中定义的数据表，用于指定需要下载的数据表 可以给出数据表名称，如 'stock_daily, stock_weekly' 也可以给出数据表的用途，如 'data, basic'"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:7
msgid "需要填充数据的DataSource, 如果为None，则填充数据源到QT_DATA_SOURCE"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:9
msgid "数据获取渠道，金融数据API，支持以下选项:  - 'tushare'     : 从Tushare API获取金融数据，请自行申请相应权限和积分 - 'akshare'     : 从AKshare API获取金融数据 - 'eastmoney'   : 从东方财富网获取金融数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:9
msgid "数据获取渠道，金融数据API，支持以下选项:"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:11
msgid "'tushare'     : 从Tushare API获取金融数据，请自行申请相应权限和积分"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:12
msgid "'akshare'     : 从AKshare API获取金融数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:13
msgid "'eastmoney'   : 从东方财富网获取金融数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:15
msgid "数据表名，必须是database中定义的数据表，用于指定需要下载的数据表"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:17
msgid "需要下载的数据类型，用于进一步筛选数据表，必须是database中定义的数据类型"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:19
msgid "需要下载的数据频率，用于进一步筛选数据表，必须是database中定义的数据频率"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:21
msgid "需要下载的数据资产类型，用于进一步筛选数据表，必须是database中定义的资产类型"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:23
msgid "是否更新trade_calendar表，如果为True，则会下载trade_calendar表的数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:25
msgid "是否更新依赖表的数据，默认True，如果设置为False，则忽略依赖表，这样可能导致数据下载不成功"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:27
#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:29
msgid "限定数据下载的时间范围，如果给出start_date/end_date，只有这个时间段内的数据会被下载"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:31
msgid "限定下载数据时的筛选参数，某些数据表以列表的形式给出可筛选参数，如stock_basic表，它有一个可筛选 参数\"exchange\"，选项包含 'SSE', 'SZSE', 'BSE'，可以通过此参数限定下载数据的范围。 如果filter_arg为None，则下载所有数据。 例如，下载stock_basic表数据时，下载以下输入均为合法输入：  - 'SZSE'     仅下载深圳交易所的股票数据 - ['SSE', 'SZSE'] - 'SSE, SZSE'     上面两种写法等效，下载上海和深圳交易所的股票数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:31
msgid "限定下载数据时的筛选参数，某些数据表以列表的形式给出可筛选参数，如stock_basic表，它有一个可筛选 参数\"exchange\"，选项包含 'SSE', 'SZSE', 'BSE'，可以通过此参数限定下载数据的范围。 如果filter_arg为None，则下载所有数据。 例如，下载stock_basic表数据时，下载以下输入均为合法输入："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:35
msgid "'SZSE'"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:36
msgid "仅下载深圳交易所的股票数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:37
msgid "['SSE', 'SZSE']"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:38
msgid "'SSE, SZSE'"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:39
msgid "上面两种写法等效，下载上海和深圳交易所的股票数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:41
msgid "用于下载数据的股票代码，如果给出了symbols，只有这些股票代码的数据会被下载"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:43
msgid "是否逆序参数下载数据， 默认False - True:  逆序参数下载数据 - False: 顺序参数下载数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:47
msgid "是否启用多线程下载数据 - True:  启用多线程下载数据 - False: 禁用多线程下载"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:51
msgid "启用多线程下载时，同时开启的线程数，默认值为设备的CPU核心数"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:53
msgid "保存数据到本地时，为了减少文件/数据库读取次数，将下载的数据累计一定数量后 再批量保存到本地，chunk_size即批量，默认值100"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:56
msgid "为了降低下载数据时的网络请求频率，可以在完成一批数据下载后，暂停一段时间再继续下载 该参数指定了每次暂停之前最多可以下载的次数，该参数只有在parallel=False时有效 如果为0，则不暂停，一次性下载所有数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:60
msgid "为了降低下载数据时的网络请求频率，可以在完成一批数据下载后，暂停一段时间再继续下载 该参数指定了每次暂停的时间，单位为秒，该参数只有在parallel=False时有效 如果<=0，则不暂停，立即开始下一批数据下载"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:64
msgid "数据写入数据源时的合并方式，支持以下选项： - 'update'  : 更新数据，如果数据已存在，则更新数据 - 'ignore'  : 忽略数据，如果数据已存在，则丢弃下载的数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.refill_data_source:68
msgid "是否记录数据下载日志"
msgstr ""

#: ../../api/history_data.rst:18
#: ../../api/history_data_types.rst:16
msgid "历史数据下载到本地之后，可以检查、管理、调用这些数据。"
msgstr ""

#: ../../api/history_data.rst:21
msgid "检查本地数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:2
msgid "获取并打印数据源中一张数据表的信息，包括数据量、占用磁盘空间、主键名称、内容"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:2
msgid "以及数据列的名称、数据类型及说明"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:6
msgid "table_name: str"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:7
msgid "需要查询的数据表名称"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:8
msgid "data_source: DataSource"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:9
msgid "需要获取数据表信息的数据源，默认None，此时获取QT_DATA_SOURCE的信息"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:11
msgid "verbose: bool, Default: True，"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:11
msgid "是否打印完整数据列名称及类型清单"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:0
msgid "returns"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:26
msgid "{"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:16
msgid "table name:    数据表名称 table_exists:  bool，数据表是否存在 table_size:    int/str，数据表占用磁盘空间，human 为True时返回容易阅读的字符串 table_rows:    int/str，数据表的行数，human 为True时返回容易阅读的字符串 primary_key1:  str，数据表第一个主键名称 pk_count1:     int，数据表第一个主键记录数量 pk_min1:       obj，数据表主键1起始记录 pk_max1:       obj，数据表主键2最终记录 primary_key2:  str，数据表第二个主键名称 pk_count2:     int，数据表第二个主键记录 pk_min2:       obj，数据表主键2起始记录 pk_max2:       obj，数据表主键2最终记录"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:28
msgid "}"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:0
msgid "rtype"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_info:29
msgid "一个dict，包含数据表的结构化信息："
msgstr ""

#: ../../api/history_data.rst:26
msgid "获取已经下载的本地数据总览"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_overview:1
msgid "显示默认数据源或指定数据源的数据总览"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:5
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_overview:3
msgid "一个data_source 对象,默认为None，如果为None，则显示默认数据源的overview"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:7
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_overview:5
msgid "需要显示overview的数据表名称，如果为None，则显示所有数据表的overview"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:9
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_overview:7
msgid "是否显示系统数据表的overview"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_table_overview:14
msgid "用法示例参见get_data_overview()"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:1
msgid "显示数据源的数据总览，等同于get_table_overview()"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:3
msgid "获取的信息包括所有数据表的数据量、占用磁盘空间、主键名称、内容等"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:12
msgid "* *pd.DataFrame* * *返回一个包含数据表的overview信息的DataFrame*"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:12
msgid "*pd.DataFrame*"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_data_overview:13
msgid "*返回一个包含数据表的overview信息的DataFrame*"
msgstr ""

#: ../../api/history_data.rst:33
msgid "使用下载的数据——基础数据"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:2
msgid "等同于get_stock_info()"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:2
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:2
msgid "根据输入的信息，查找股票、基金、指数或期货、期权的基本信息"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:4
msgid "证券代码或名称：  - 如果是证券代码，可以含后缀也可以不含后缀，含后缀时精确查找、不含后缀时全局匹配 - 如果是证券名称，可以包含通配符模糊查找，也可以通过名称模糊查找 - 如果精确匹配到一个证券代码，返回一个字典，包含该证券代码的相关信息"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:4
msgid "证券代码或名称："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:6
msgid "如果是证券代码，可以含后缀也可以不含后缀，含后缀时精确查找、不含后缀时全局匹配"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:7
msgid "如果是证券名称，可以包含通配符模糊查找，也可以通过名称模糊查找"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:8
msgid "如果精确匹配到一个证券代码，返回一个字典，包含该证券代码的相关信息"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:9
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:8
msgid "证券类型，接受列表或逗号分隔字符串，包含认可的资产类型：  - E     股票 - IDX   指数 - FD    基金 - FT    期货 - OPT   期权"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:9
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:8
msgid "证券类型，接受列表或逗号分隔字符串，包含认可的资产类型："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:11
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:10
msgid "E     股票"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:12
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:11
msgid "IDX   指数"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:13
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:12
msgid "FD    基金"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:14
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:13
msgid "FT    期货"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:15
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:14
msgid "OPT   期权"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:17
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:15
msgid "是否匹配股票或基金的全名，默认否，如果匹配全名，耗时更长"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:19
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:17
msgid "如果为True，打印匹配到的结果"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:21
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:19
msgid "当匹配到的证券太多时（多于五个），是否显示完整的信息  - False 默认值，只显示匹配度最高的内容 - True  显示所有匹配到的内容"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:21
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:19
msgid "当匹配到的证券太多时（多于五个），是否显示完整的信息"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:23
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:21
msgid "False 默认值，只显示匹配度最高的内容"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:24
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:22
msgid "True  显示所有匹配到的内容"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:27
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:25
msgid "当仅找到一个匹配时，返回一个dict，包含找到的基本信息，根据不同的证券类型，找到的信息不同：  - 股票信息：公司名、地区、行业、全名、上市状态、上市日期 - 指数信息：指数名、全名、发行人、种类、发行日期 - 基金：   基金名、管理人、托管人、基金类型、发行日期、发行数量、投资类型、类型 - 期货：   期货名称 - 期权：   期权名称"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:27
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:25
msgid "当仅找到一个匹配时，返回一个dict，包含找到的基本信息，根据不同的证券类型，找到的信息不同："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:29
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:27
msgid "股票信息：公司名、地区、行业、全名、上市状态、上市日期"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:30
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:28
msgid "指数信息：指数名、全名、发行人、种类、发行日期"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:31
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:29
msgid "基金：   基金名、管理人、托管人、基金类型、发行日期、发行数量、投资类型、类型"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:32
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:30
msgid "期货：   期货名称"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_basic_info:33
#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:31
msgid "期权：   期权名称"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:2
msgid "等同于get_basic_info()"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:4
msgid "证券代码或名称， 如果是证券代码，可以含后缀也可以不含后缀，含后缀时精确查找、不含后缀时全局匹配 如果是证券名称，可以包含通配符模糊查找，也可以通过名称模糊查找 如果精确匹配到一个证券代码，返回一个字典，包含该证券代码的相关信息"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.get_stock_info:36
msgid "用法示例参见：get_basic_info()"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stock_codes:1
msgid "根据输入的参数调用filter_stocks筛选股票，并返回股票代码的清单"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stock_codes:3
#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stocks:3
msgid "筛选股票的上市日期，在该日期以后上市的股票将会被剔除："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stock_codes:5
msgid "可以通过以下参数筛选股票, 可以同时输入多个筛选条件，只有符合要求的股票才会被筛选出来"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stock_codes:10
msgid ":obj:`filter_stocks`"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stocks:1
msgid "根据输入的参数筛选股票，并返回一个包含股票代码和相关信息的DataFrame"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stocks:5
msgid "可以通过以下参数筛选股票, 可以同时输入多个筛选条件，只有符合要求的股票才会被筛选出来 - index:      根据指数筛选，不含在指定的指数内的股票将会被剔除 - industry:   公司所处行业，只有列举出来的行业会被选中 - area:       公司所处省份，只有列举出来的省份的股票才会被选中 - market:     市场，分为主板、创业板等 - exchange:   交易所，包括上海证券交易所和深圳股票交易所"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.filter_stocks:13
msgid "**DataFrame**"
msgstr ""

#: ../../api/history_data.rst:44
msgid "使用下载的数据——获取价格或技术指标"
msgstr ""

#: ../../api/history_data_types.rst:2
msgid "QTEASY管理的历史数据种类"
msgstr ""

#: ../../api/history_data_types.rst:8
msgid "查找支持历史数据:"
msgstr ""

#: ../../api/history_data_types.rst:18
msgid "检查本地数据:"
msgstr ""

#: ../../api/history_data_types.rst:22
msgid "获取已经下载的本地数据总览:"
msgstr ""

#: ../../api/history_data_types.rst:28
msgid "下载数据基础数据:"
msgstr ""

#: ../../api/use_qteasy.rst:2
msgid "启动QTEASY"
msgstr ""

#: ../../api/use_qteasy.rst:4
msgid "启动qteasy的配置信息:"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:1
msgid "`qteasy`模块的主要入口函数"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:3
msgid "接受`operator`执行器对象作为主要的运行组件，根据输入的运行模式确定运行的方式和结果 根据QT_CONFIG配置变量中的设置和运行模式（mode）进行不同的操作："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:14
msgid "mode == 0, live trade mode, 实盘交易模式："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:7
msgid "一旦启动此模式，就会在terminal中启动一个单独的线程在后台运行，运行的时机也是跟真实的股票市场一致的，股票市场收市的时 候不运行，交易日早上9点15分唤醒系统开始拉取实时股价，9点半开始运行交易策略，交易策略的运行时机和运行频率在策略的属性中 设置。如果策略运行的结果产生交易信号，则根据交易信号模拟挂单，挂单成交后修改响应账户资金和股票持仓，交易费用按照设置中 的费率扣除。如果资金不足或持仓不足会导致交易失败，当天买入的股票同真实市场一样T+1交割，第二个交易日开始前交割完毕。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:12
msgid "`Qteasy`的实盘运行有一个“账户”的概念，就跟您在股票交易市场开户一样，一个账户可以有自己的持有资金，股票持仓，单独 计算盈亏。运行过程中您可以随时终止程序，这时所有的交易记录都会保存下来，下次重新启动时，只要引用上一次运行使用的 账户ID（account ID）就可以从上次中断的地方继续运行了，因此启动时需要指定账户，如果不想继续上次的账户，可以新开一个账户运行。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:60
msgid "mode == 1, backtest mode, 回测模式，根据历史数据生成交易信号，执行交易："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:17
msgid "根据Config规定的回测区间，使用History模块联机读取或从本地读取覆盖整个回测区间的历史数据 生成投资资金模型，模拟在回测区间内使用投资资金模型进行模拟交易的结果 输出对结果的评价（使用多维度的评价方法） 输出回测日志· 投资资金模型不能为空，策略参数不能为空"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:23
msgid "根据执行器历史数据hist_op，应用operator执行器对象中定义的投资策略生成一张投资产品头寸及仓位建议表。 这张表的每一行内的数据代表在这个历史时点上，投资策略建议对每一个投资产品应该持有的仓位。每一个历史时点的数据都是根据这个历史时点的 相对历史数据计算出来的。这张投资仓位建议表的历史区间受Config上下文对象的\"loop_period_start, loop_period_end, loop_period_freq\" 等参数确定。 同时，这张投资仓位建议表是由operator执行器对象在hist_op策略生成历史数据上生成的。hist_op历史数据包含所有用于生成策略运行结果的信息 包括足够的数据密度、足够的前置历史区间以及足够的历史数据类型（如不同价格种类、不同财报指标种类等） operator执行器对象接受输入的hist_op数据后，在数据集合上反复循环运行，从历史数据中逐一提取出一个个历史片段，根据这个片段生成一个投资组合 建议，然后把所有生成的投资组合建议组合起来形成完整的投资组合建议表。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:32
msgid "投资组合建议表生成后，系统在整个投资组合建议区间上比较前后两个历史时点上的建议持仓份额，当发生建议持仓份额变动时，根据投资产品的类型 生成投资交易信号，包括交易方向、交易产品和交易量。形成历史交易信号表。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:35
msgid "历史交易信号表生成后，系统在相应的历史区间中创建hist_loop回测历史数据表，回测历史数据表包含对回测操作来说必要的历史数据如股价等，然后 在hist_loop的历史数据区间上对每一个投资交易信号进行模拟交易，并且逐个生成每个交易品种的实际成交量、成交价格、交易费用（通过Rate类估算） 以及交易前后的持有资产数量和持有现金数量的变化，以及总资产的变化。形成一张交易结果清单。交易模拟过程中的现金投入过程通过CashPlan对象来 模拟。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:40
msgid "因为交易结果清单是根据有交易信号的历史交易日上计算的，因此并不完整。根据完整的历史数据，系统可以将数据补充完整并得到整个历史区间的 每日甚至更高频率的投资持仓及总资产变化表。完成这张表后，系统将在这张总资产变化表上执行完整的回测结果分析，分析的内容包括："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:42
msgid "1，total_investment                      总投资 2，total_final_value                     投资期末总资产 3，loop_length                           投资模拟区间长度 4，total_earning                         总盈亏 5，total_transaction_cost                总交易成本 6，total_open                            总开仓次数 7，total_close                           总平仓次数 8，total_return_rate                     总收益率 9，annual_return_rate                    总年化收益率 10，reference_return                     基准产品总收益 11，reference_return_rate                基准产品总收益率 12，reference_annual_return_rate         基准产品年化收益率 13，max_retreat                          投资期最大回测率 14，Karma_rate                           卡玛比率 15，Sharp_rate                           夏普率 16，win_rate                             胜率"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:59
msgid "上述所有评价结果和历史区间数据能够以可视化的方式输出到图表中。同时回测的结果数据和回测区间的每一次模拟交易记录也可以被记录到log对象中 保存在磁盘上供未来调用"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:159
msgid "mode == 2, optimization mode, 优化模式，使用一段历史数据区间内的数据来寻找最优的策略参数组合，然后在另一段历史数据区间内进行回测，评价:"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:63
msgid "策略优化模式： 根据Config规定的优化区间和回测区间，使用History模块联机读取或本地读取覆盖整个区间的历史数据 生成待优化策略的参数空间，并生成投资资金模型 使用指定的优化方法在优化区间内查找投资资金模型的全局最优或局部最优参数组合集合 使用在优化区间内搜索到的全局最优策略参数在回测区间上进行多次回测并再次记录结果 输出最优参数集合在优化区间和回测区间上的评价结果 输出优化及回测日志 投资资金模型不能为空，策略参数可以为空"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:72
msgid "优化模式的目的是寻找能让策略的运行效果最佳的参数或参数组合。 寻找能使策略的运行效果最佳的参数组合并不是一件容易的事，因为我们通常认为运行效果最佳的策略是能在\"未来\"实现最大收益的策略。但是，鉴于 实际上要去预测未来是不可能的，因此我们能采取的优化方法几乎都是以历史数据——也就是过去的经验——为基础的，并且期望通过过去的历史经验 达到某种程度上\"预测未来\"的效果。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:77
msgid "策略优化模式或策略优化器的工作方法就基于这个思想，如果某个或某组参数使得某个策略的在过去足够长或者足够有代表性的历史区间内表现良好， 那么很有可能它也能在有限的未来不大会表现太差。因此策略优化模式的着眼点完全在于历史数据——所有的操作都是通过解读历史数据，或者策略在历史数据 上的表现来评判一个策略的优劣的，至于如何找到对策略的未来表现有更大联系的历史数据或表现形式，则是策略设计者的责任。策略优化器仅仅 确保找出的参数组合在过去有很好的表现，而对于未来无能为力。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:82
msgid "优化器的工作基础在于历史数据。它的工作方法从根本上来讲，是通过检验不同的参数在同一组历史区间上的表现来评判参数的优劣的。优化器的 工作方法可以大体上分为以下两类："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:85
msgid "1，无监督方法类：这一类方法不需要事先知道\"最优\"或先验信息，从未知开始搜寻最佳参数。这类方法需要大量生成不同的参数组合，并且 在同一个历史区间上反复回测，通过比较回测的结果而找到最优或较优的参数。这一类优化方法的假设是，如果这一组参数在过去取得了良好的 投资结果，那么很可能在未来也不会太差。 这一类方法包括："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:89
msgid "1，Grid_searching                        网格搜索法："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:91
msgid "网格法是最简单和直接的参数优化方法，在已经定义好的参数空间中，按照一定的间隔均匀地从向量空间中取出一系列的点， 逐个在优化空间中生成交易信号并进行回测，把所有的参数组合都测试完毕后，根据目标函数的值选择排名靠前的参数组合即可。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:94
msgid "网格法能确保找到参数空间中的全剧最优参数，不过必须逐一测试所有可能的参数点，因此计算量相当大。同时，网格法只 适用于非连续的参数空间，对于连续空间，仍然可以使用网格法，但无法真正\"穷尽\"所有的参数组合"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:97
msgid "关于网格法的具体参数和输出，参见self._search_grid()函数的docstring"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:99
msgid "2，Montecarlo_searching                  蒙特卡洛法"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:101
msgid "蒙特卡洛法与网格法类似，也需要检查并测试参数空间中的大量参数组合。不过在蒙特卡洛法中，参数组合是从参数空间中随机 选出的，而且在参数空间中均匀分布。与网格法相比，蒙特卡洛方法不仅更适合于连续参数空间、通常情况下也有更好的性能。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:104
msgid "关于蒙特卡洛方法的参数和输出，参见self._search_montecarlo()函数的docstring"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:106
msgid "3，Incremental_step_searching            递进搜索法"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:108
msgid "递进步长法的基本思想是对参数空间进行多轮递进式的搜索，每一轮搜索方法与蒙特卡洛法相同但是每一轮搜索后都将搜索 范围缩小到更希望产生全局最优的子空间中，并在这个较小的子空间中继续使用蒙特卡洛法进行搜索，直到该子空间太小、 或搜索轮数大于设定值为止。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:112
msgid "使用这种技术，在一个250*250*250的空间中，能够把搜索量从15,000,000降低到10,000左右,缩减到原来的1/1500， 却不太会影响最终搜索的效果。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:115
msgid "关于递进步长法的参数和输出，参见self._search_incremental()函数的docstring"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:117
msgid "4，Genetic_Algorithm                     遗传算法 （尚未实现）"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:119
msgid "遗传算法适用于\"超大\"参数空间的参数寻优。对于有二到三个参数的策略来说，使用蒙特卡洛或网格法是可以承受的选择， 如果参数数量增加到4到5个，递进步长法可以帮助降低计算量，然而如果参数有数百个，而且每一个都有无限取值范围的时 候，任何一种基于网格的方法都没有应用的意义了。如果目标函数在参数空间中是连续且可微的，可以使用基于梯度的方法， 但如果目标函数不可微分，GA方法提供了一个在可以承受的时间内找到全局最优或局部最优的方法。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:124
msgid "GA方法受生物进化论的启发，通过模拟生物在自然选择下的基因进化过程，在复杂的超大参数空间中搜索全局最优或局部最 优参数。GA的基本做法是模拟一个足够大的\"生物\"种群在自然环境中的演化，这些生物的\"基因\"是参数空间中的一个点， 在演化过程中，种群中的每一个个体会发生变异、也会通过杂交来改变或保留自己的\"基因\"，并把变异或杂交后的基因传递到 下一代。在每一代的种群中，优化器会计算每一个个体的目标函数并根据目标函数的大小确定每一个个体的生存几率和生殖几 率。由于表现较差的基因生存和生殖几率较低，因此经过数万乃至数十万带的迭代后，种群中的优秀基因会保留并演化出更 加优秀的基因，最终可能演化出全局最优或至少局部最优的基因。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:131
msgid "关于遗传算法的详细参数和输出，参见self._search_ga()函数的docstring"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:133
msgid "5, Gradient Descendent Algorithm        梯度下降算法 （尚未实现）"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:135
msgid "梯度下降算法"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:137
msgid "2，有监督方法类：这一类方法依赖于历史数据上的（有用的）先验信息：比如过去一个区间上的已知交易信号、或者价格变化信息。然后通过 优化方法寻找历史数据和有用的先验信息之间的联系（目标联系）。这一类优化方法的假设是，如果这些通过历史数据直接获取先验信息的 联系在未来仍然有效，那么我们就可能在未来同样根据这些联系，利用已知的数据推断出对我们有用的信息。 这一类方法包括："
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:141
msgid "1，ANN_based_methods                     基于人工神经网络的有监督方法（尚未实现） 2，SVM                                   支持向量机类方法（尚未实现） 3，KNN                                   基于KNN的方法（尚未实现）"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:145
msgid "为了实现上面的方法，优化器需要两组历史数据，分别对应两个不同的历史区间，一个是优化区间，另一个是回测区间。在优化的第一阶段，优化器 在优化区间上生成交易信号，或建立目标联系，并且在优化区间上找到一个或若干个表现最优的参数组合或目标联系，接下来，在优化的第二阶段， 优化器在回测区间上对寻找到的最优参数组合或目标联系进行测试，在回测区间生成对所有中选参数的“独立”表现评价。通常，可以选择优化区间较 长且较早，而回测区间较晚而较短，这样可以模拟根据过去的信息建立的策略在未来的表现。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:150
msgid "优化器的优化过程首先开始于一个明确定义的参数\"空间\"。参数空间在系统中定义为一个Space对象。如果把策略的参数用向量表示，空间就是所有可能 的参数组合形成的向量空间。对于无监督类方法来说，参数空间容纳的向量就是交易信号本身或参数本身。而对于有监督算法，参数空间是将历史数据 映射到先验数据的一个特定映射函数的参数空间，例如，在ANN方法中，参数空间就是神经网络所有神经元连接权值的可能取值空间。优化器的工作本质 就是在这个参数空间中寻找全局最优解或局部最优解。因此理论上所有的数值优化方法都可以用于优化器。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:155
msgid "优化器的另一个重要方面是目标函数。根据目标函数，我们可以对优化参数空间中的每一个点计算出一个目标函数值，并根据这个函数值的大小来评判 参数的优劣。因此，目标函数的输出应该是一个实数。对于无监督方法，目标函数与参数策略的回测结果息息相关，最直接的目标函数就是投资终值， 当初始投资额相同的时候，我们可以简单地认为终值越高，则参数的表现越好。但目标函数可不仅仅是终值一项，年化收益率或收益率、夏普率等等 常见的评价指标都可以用来做目标函数，甚至目标函数可以用复合指标，如综合考虑收益率、交易成本、最大回撤等指标的一个复合指标，只要目标函数 的输出是一个实数，就能被用作目标函数。而对于有监督方法，目标函数表征的是从历史数据到先验信息的映射能力，通常用实际输出与先验信息之间 的差值的函数来表示。在机器学习和数值优化领域，有多种函数可选，例如MSE函数，CrossEntropy等等。"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:164
msgid "Config.mode == 3 or mode == 3:"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:162
msgid "进入评价模式（技术冻结后暂停开发此功能） 评价模式的思想是使用随机生成的模拟历史数据对策略进行评价。由于可以使用大量随机历史数据序列进行评价，因此可以得到策略的统计学 表现"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:166
msgid "策略执行器对象"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:168
msgid "可用的kwargs包括所有合法的qteasy配置参数，参见qteasy文档"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:170
msgid "* *1, 在live_trade模式或模式0下，进入实盘交易Shell* * **2, 在back_test模式或模式1下, 返回** (*loop_result*) * **3, 在optimization模式或模式2下** (*返回一个list，包含所有优化后的策略参数*)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:170
msgid "*1, 在live_trade模式或模式0下，进入实盘交易Shell*"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:171
msgid "**2, 在back_test模式或模式1下, 返回** (*loop_result*)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.run:172
msgid "**3, 在optimization模式或模式2下** (*返回一个list，包含所有优化后的策略参数*)"
msgstr ""

#: ../../../../qteasy/core.py:docstring of qteasy.core.info:1
msgid "qteasy 模块的帮助信息入口函数"
msgstr ""
